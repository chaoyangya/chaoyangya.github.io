<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>App跟web定位元素页面相互切换</title>
    <url>/2018/10/11/App%E8%B7%9Fweb%E5%AE%9A%E4%BD%8D%E5%85%83%E7%B4%A0%E9%A1%B5%E9%9D%A2%E7%9B%B8%E4%BA%92%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<p>很多QA在做UI自动化或者App自动化的时候，会遇到在web页面要抓取App模式的元素，或者是在App要抓取H5页面的元素，从网上整理了一些方法，不一定能解决，但是试一下也未尝不可，如果解决了就记得关注一波咯！！！<code>python噢</code>~~~</p>
<pre><code>self.driver.switch_to.context()
self.driver.switch_to.context(&#39;WEBVIEW_1&#39;)app --&gt; web
self.driver.switch_to.context(&#39;NATIVE_APP&#39;)web --&gt; app
</code></pre>
<p>如果是从App转到web 选择<code>WEBVIEW_1</code>，<br>如果web转到App 选择 <code>NATIVE_APP</code></p>
]]></content>
      <categories>
        <category>Appium</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Appium</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7.7安装并配置jenkins+python+allure发送定制化报告</title>
    <url>/2020/09/03/Centos7-7%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AEjenkins-python-allure%E5%8F%91%E9%80%81%E5%AE%9A%E5%88%B6%E5%8C%96%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<h1 id="【全网最全】Centos7-7安装并配置jenkins-python-allure发送定制化报告"><a href="#【全网最全】Centos7-7安装并配置jenkins-python-allure发送定制化报告" class="headerlink" title="【全网最全】Centos7.7安装并配置jenkins+python+allure发送定制化报告"></a>【全网最全】Centos7.7安装并配置jenkins+python+allure发送定制化报告</h1><p>目前测试开发方向的接口自动化脚本很多，这里就不一一列举了，有兴趣的可以baidu/google 一大堆，本次主要根据自己公司/业务需要搭建了一套基于python3.7+pytest+allure的接口自动化脚本，由于工作原因，源码就不放了，最下面会放一个很简单的脚本，不想写的可以暂时先用下，调试通过以后，再进行业务代码的编写也是ok的，话不多说，开整。</p>
<h2 id="Centos版本的选择"><a href="#Centos版本的选择" class="headerlink" title="Centos版本的选择"></a>Centos版本的选择</h2><p>这里我选择的是阿里云的服务器，配置很低的那种，自己练手搭个小项目已经完全ok啦。</p>
<p>说一下为什么我选择centos7.7版本吧，目前别的版本，也有人一直在用，但是会有一些不支持的功能，比如说我上次使用的7.3中的启动服务的时候，会有一些权限问题，总之层出不穷，大家可以去踩一下坑，只有你想不到没有出现不了的新问题，当时几乎快崩溃了，然后突然google发现一位国外大神，通过更换centos版本完美的解决了这个问题，我就重新选择版本，重新开始，当自己需要的一些服务慢慢变绿的时候，心中的喜悦大概只有自己知道吧。</p>
<h2 id="Python3-7的安装和配置"><a href="#Python3-7的安装和配置" class="headerlink" title="Python3.7的安装和配置"></a>Python3.7的安装和配置</h2><p>1、先用root账号登录你的服务器，注意后面的操作都是在root权限进行的噢</p>
<pre><code>PS：安装python3 需要很多的依赖包，所以我们先安装依赖包建议在根目录上执行

切换到根目录：`cd  /`

安装命令如下：`yum -y groupinstall &quot;Development tools&quot;`

然后继续安装下一个依赖：`yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel`

最后一个依赖：`yum install libffi-devel -y`

如果安装上面的依赖没有出错的话，就可以下载python3.7的包了，如果安装依赖出现错误，请自行百度解决
</code></pre>
<p>2、下载python3.7 安装包</p>
<pre><code>下载：``wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz`

**如果wget没有安装的话，请先安装wget：yum -y install wget (已安装忽略这一步)**

解压：`tar -xvJf  Python-3.7.0.tar.xz`
</code></pre>
<p>3、解压完成后，编译安装</p>
<pre><code>创建编译安装目录：`mkdir /usr/local/python3`

解压完成后会创建一个Python-3.7.0文件夹，进入该文件夹：`cd Python-3.7.0`

配置到创建编译安装目录：`./configure --prefix=/usr/local/python3 `

然后开始编译安装：`make &amp;&amp; make install `
</code></pre>
<p>4、创建软件连接</p>
<pre><code>创建python3软链接：`ln -s /usr/local/python3/bin/python3 /usr/local/bin/python3`

创建pip3软链接：`ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3
</code></pre>
<p>`</p>
<p>5、到这里就安装完成了，验证安装是否成功</p>
<pre><code>查看python3版本：`python3 -V`

查看pip3版本：`pip3 -V` 

分别指向安装路径就安装成功啦
</code></pre>
<p>6、配置环境变量</p>
<pre><code>环境变量内容：`export PYTHON_HOME=/usr/local/python3/`
            `export PATH=$PYTHON_HOME/bin:$PATH`

编辑环境变量文件：`vim /etc/profile`

把环境变量内容粘贴到环境变量文件最后一行保存：`：wq`

让刚刚更改的环境变量生效：`source /etc/profile`

上面让环境变量生效只是本次有效，下次连接就失效了，这里要把命令放到 ：`vim ~/.bashrc` 中，如下图
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200903145729665.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="Python测试脚本"><a href="#Python测试脚本" class="headerlink" title="Python测试脚本"></a>Python测试脚本</h2><p>这里的脚本可以使用我的(Github)，也可以自己写一个，目的主要是为了接下来的jenkins配置使用</p>
<p><a href="https://github.com/chaoyangya/xiaowangapi">Github</a></p>
<h2 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h2><p>1、安装jenkins必须安装jdk</p>
<pre><code>下载jdk:`wget --no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; https://download.oracle.com/otn-pub/java/jdk/8u201-b09/42970487e3af4f5aa5bca3f542482c60/jdk-8u201-linux-x64.tar.gz`

或者：`wget --no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.rpm`

我这里下载的是rpm的文件类型

下载完成之后解压：`rpm -ivh  jdk-8u151-linux-x64.rpm`
</code></pre>
<p>2、配置java环境变量</p>
<pre><code>编辑系统环境变量：`vim /etc/profile`

变量内容(根据自己安装的jdk路径更改)：`export JAVA_HOME=/usr/lib/jvm/java`
                                `export PATH=$JAVA_HOME/bin:$PATH`

让配置生效 ：`source /etc/profile`
</code></pre>
<p>3、安装Jenkins</p>
<pre><code>首先下载jenkins：`wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo`

然后导入公钥：`rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key`

安装jenkins：`yum install -y jenkins --nogpgcheck`
</code></pre>
<p>4、配置jenkins</p>
<pre><code>更改端口：`vi /etc/sysconfig/jenkins`  ：`JENKINS_PORT=&quot;8080&quot;`

更改用户：`vi /etc/sysconfig/jenkins`  ：`JENKINS_USER=&quot;root&quot;`

然后让配置生效：`source /etc/sysconfig/jenkins`
</code></pre>
<p>5、重新启动jenkins</p>
<pre><code>启动：`service jenkins restart`
</code></pre>
<p>6、打开jenkins网址</p>
<pre><code>浏览器打开：`你的ip+8080`
</code></pre>
<h2 id="配置Jenkins"><a href="#配置Jenkins" class="headerlink" title="配置Jenkins"></a>配置Jenkins</h2><p>因为我这里已经安装过jenkins了，一开始的jenkins安装配置就不说了，其他博主的都ok，主要说一下怎么配置allure</p>
<p>1、安装allure插件</p>
<p><img src="https://img-blog.csdnimg.cn/20200903152249782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW95YW5nX28=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<pre><code>找到![在这里插入图片描述](https://img-blog.csdnimg.cn/20200903152325565.png#pic_center)

搜索 `allure` 安装就好了
</code></pre>
<p>2、配置jdk和allure</p>
<p>jdk：<img src="https://img-blog.csdnimg.cn/20200903152425965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW95YW5nX28=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>allure：<img src="https://img-blog.csdnimg.cn/20200903152446147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW95YW5nX28=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>3、新建job(选择自由风格)</p>
<p>配置git地址：<img src="https://img-blog.csdnimg.cn/20200903152526480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW95YW5nX28=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>配置shell：<br><img src="https://img-blog.csdnimg.cn/20200903152552342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW95YW5nX28=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<pre><code>这里要注意一下，最好找到你的jenkins的工作空间路径，把项目放到你的工作空间路径去
</code></pre>
<p>4、添加allure报告插件</p>
<p><img src="https://img-blog.csdnimg.cn/20200903152752887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW95YW5nX28=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>5、在Advanced中配置html生成的目录</p>
<p><img src="https://img-blog.csdnimg.cn/20200903152847803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW95YW5nX28=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>6、具体路径配置相关，可以参考下我项目中的目录结构，自己亲自动手配置一遍就懂了</p>
<p>7、打开报告</p>
<pre><code>Build Now完成后会生成报告
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/2020090315310831.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW95YW5nX28=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>8、查看报告</p>
<pre><code>查看报告：
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20200903153229539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW95YW5nX28=,size_16,color_FFFFFF,t_70#pic_center" alt="1"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Jenkins</tag>
        <tag>Allure</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7安装chrome浏览器</title>
    <url>/2021/08/20/Centos7%E5%AE%89%E8%A3%85chrome%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
    <content><![CDATA[<h2 id="1-下载chrome-for-linux压缩包"><a href="#1-下载chrome-for-linux压缩包" class="headerlink" title="1.下载chrome for linux压缩包"></a>1.下载chrome for linux压缩包</h2><p><a href="https://pan.baidu.com/s/1WwxOb1LiRSL2DnXvKlacZw">百度网盘</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  提取码: 1f4n    </span><br></pre></td></tr></table></figure>

<p><a href="https://www.chromedownloads.net/chrome64linux/">更多版本</a></p>
<h2 id="2-上传解压压缩包"><a href="#2-上传解压压缩包" class="headerlink" title="2.上传解压压缩包"></a>2.上传解压压缩包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ unzip google-chrome-stable_deb_rpm_91.0.4472.77.zip  <span class="comment">#解压完成会出现 .deb 和 .rpm 的俩个文件</span></span><br></pre></td></tr></table></figure>

<h2 id="3-安装解压chrome所需依赖包"><a href="#3-安装解压chrome所需依赖包" class="headerlink" title="3.安装解压chrome所需依赖包"></a>3.安装解压chrome所需依赖包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y lsb</span><br><span class="line">  yum install -y libXScrnSaver</span><br><span class="line">  yum install -y liberation-fonts</span><br><span class="line">  yum install -y libdbusmenu-gtk3</span><br><span class="line">  yum install epel-release</span><br></pre></td></tr></table></figure>

<h2 id="4-安装chrome"><a href="#4-安装chrome" class="headerlink" title="4.安装chrome"></a>4.安装chrome</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo rpm -ivh google-chrome-stable_current_x86_64.rpm </span><br></pre></td></tr></table></figure>

<h2 id="5-启动服务"><a href="#5-启动服务" class="headerlink" title="5.启动服务"></a>5.启动服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl start atd.service</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Centos</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Centos</tag>
      </tags>
  </entry>
  <entry>
    <title>DJango Uncaught ReferenceError: $ is not defined</title>
    <url>/2021/08/31/DJango-Uncaught-ReferenceError-is-not-defined/</url>
    <content><![CDATA[<p>前提:<br><strong>用django和jquery写的web应用,html页面js报错,信息如下:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ DJango Uncaught ReferenceError: $ is not defined</span><br></pre></td></tr></table></figure>
<img src="/2021/08/31/DJango-Uncaught-ReferenceError-is-not-defined/img8.png" class title="This is an test image">

<p>原因: js语法有问题,未识别为js语法</p>
<p>解决:需要引入jquery</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ &lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;../static/main/js/jquery-2.1.1.min.js&quot;</span>&gt;&lt;/script&gt; <span class="comment">#src后面加js文件路径</span></span><br></pre></td></tr></table></figure>
<img src="/2021/08/31/DJango-Uncaught-ReferenceError-is-not-defined/img9.png" class title="This is an test image">
]]></content>
      <categories>
        <category>Jquery</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>Django发送邮箱验证码实现以及邮箱html模板</title>
    <url>/2021/09/08/Django%E5%8F%91%E9%80%81%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E9%82%AE%E7%AE%B1html%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h2 id="1-setting配置"><a href="#1-setting配置" class="headerlink" title="1.setting配置"></a>1.setting配置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">EMAIL_BACKEND = <span class="string">&#x27;django.core.mail.backends.smtp.EmailBackend&#x27;</span></span><br><span class="line">EMAIL_HOST = <span class="string">&quot;smtp.163.com&quot;</span>  <span class="comment"># 服务器</span></span><br><span class="line">EMAIL_PORT = <span class="number">25</span>  <span class="comment"># 一般情况下都为25</span></span><br><span class="line">EMAIL_HOST_USER = <span class="string">&quot;xxxx@163.com&quot;</span>  <span class="comment"># 账号</span></span><br><span class="line">EMAIL_HOST_PASSWORD = <span class="string">&quot;XXXXXXXXXXXX&quot;</span>  <span class="comment"># 密码 (注意：这里的密码指的是授权码)</span></span><br><span class="line">EMAIL_USE_TLS = <span class="literal">False</span>  <span class="comment"># 一般都为False</span></span><br><span class="line">EMAIL_FROM = <span class="string">&quot;xxxx@163.com&quot;</span>  <span class="comment"># 邮箱来自 一般和邮箱账号保持一致</span></span><br></pre></td></tr></table></figure>

<h2 id="2-邮箱配置"><a href="#2-邮箱配置" class="headerlink" title="2.邮箱配置"></a>2.邮箱配置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#登录邮箱-设置-POP3/SMTP/IMAP,开启服务，保存授权码，切记要保存，授权码就是密码</span></span><br><span class="line">如图：</span><br></pre></td></tr></table></figure>
<img src="/2021/09/08/Django%E5%8F%91%E9%80%81%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E9%82%AE%E7%AE%B1html%E6%A8%A1%E6%9D%BF/img17.png" class title="邮箱配置">

<h2 id="3-代码部分"><a href="#3-代码部分" class="headerlink" title="3.代码部分"></a>3.代码部分</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> EmailMessage</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean_email</span>(<span class="params">self</span>):</span></span><br><span class="line">    email_title = <span class="string">&quot;验证码&quot;</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#这里是生成随机验证码 我是4位的，可以自定义</span></span><br><span class="line">    code = random.randrange(<span class="number">1000</span>, <span class="number">9999</span>)   </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#这个context这里定义的字段，是要给html模板中的验证码使用的，HTML中&#123;% code %&#125;引用即可</span></span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">&#x27;code&#x27;</span>: <span class="built_in">str</span>(code)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#这里的html文件就是发送验证码部分的html模板我放在下面</span></span><br><span class="line">    email_template_name = <span class="string">&#x27;tools_email.html&#x27;</span>     </span><br><span class="line">    t = loader.get_template(email_template_name)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#发送html验证码到邮箱有三种方式，我觉得这种最方便，其他自行百度</span></span><br><span class="line">    html_content = t.render(context)</span><br><span class="line">    email = self.cleaned_data[<span class="string">&#x27;email&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#判断邮箱是否存在</span></span><br><span class="line">    exists = models.UserInfo.objects.<span class="built_in">filter</span>(email=email).exists()</span><br><span class="line">    <span class="keyword">if</span> exists:</span><br><span class="line">        msg = EmailMessage(email_title,  <span class="comment"># 邮件主题</span></span><br><span class="line">                           html_content,  <span class="comment"># 邮件内容，使用html模板</span></span><br><span class="line">                           settings.EMAIL_FROM,  <span class="comment"># 用于发送邮件的用户</span></span><br><span class="line">                           [email]  <span class="comment"># 接收邮件的用户列表</span></span><br><span class="line">                           )</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#指定邮箱发送的类型</span></span><br><span class="line">        msg.content_subtype = <span class="string">&#x27;html&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#发送邮箱</span></span><br><span class="line">        send_status = msg.send()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> send_status:</span><br><span class="line">            <span class="keyword">return</span> ValidationError(<span class="string">&#x27;发生邮箱失败,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(send_status[<span class="string">&#x27;errmsg&#x27;</span>]))</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#放到redis中，有效时长2min</span></span><br><span class="line">        conn = get_redis_connection()</span><br><span class="line">        conn.<span class="built_in">set</span>(email, code, ex=<span class="number">120</span>)</span><br><span class="line">        <span class="keyword">return</span> email</span><br><span class="line">    <span class="keyword">return</span> ValidationError(<span class="string">&#x27;邮箱未注册&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h2 id="4-html模板"><a href="#4-html模板" class="headerlink" title="4.html模板"></a>4.html模板</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css">::-webkit-scrollbar &#123;</span></span><br><span class="line"><span class="css">        display: none;</span></span><br><span class="line"><span class="css">    &#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">id</span>=<span class="string">&quot;cloudAttachStyle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"><span class="selector-id">#divNeteaseBigAttach</span>, <span class="selector-id">#divNeteaseBigAttach_bak</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">    &#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">id</span>=<span class="string">&quot;blockquoteStyle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"><span class="selector-tag">blockquote</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="css">    &#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-family</span>: arial, verdana, sans-serif;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">1.666</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">white-space</span>: normal;</span></span><br><span class="line"><span class="css">            <span class="attribute">word-wrap</span>: break-word;</span></span><br><span class="line"><span class="css">            <span class="attribute">min-height</span>: <span class="number">100px</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">td</span>, <span class="selector-tag">input</span>, <span class="selector-tag">button</span>, select, <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-family</span>: Helvetica, <span class="string">&#x27;Microsoft Yahei&#x27;</span>, verdana</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        pre &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">white-space</span>: pre-wrap;</span></span><br><span class="line"><span class="css">            <span class="attribute">white-space</span>: -moz-pre-wrap;</span></span><br><span class="line"><span class="css">            <span class="attribute">white-space</span>: -pre-wrap;</span></span><br><span class="line"><span class="css">            <span class="attribute">white-space</span>: -o-pre-wrap;</span></span><br><span class="line"><span class="css">            <span class="attribute">word-wrap</span>: break-word;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">95%</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-family</span>: arial, verdana, sans-serif;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">1.666</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">0</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">header</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">section</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">article</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">hgroup</span>, <span class="selector-tag">figure</span>, <span class="selector-tag">figcaption</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">blockquote</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: <span class="number">0px</span></span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">tabindex</span>=<span class="string">&quot;0&quot;</span> <span class="attr">role</span>=<span class="string">&quot;listitem&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;700&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:700px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:700px;margin:0 auto;border-bottom:1px solid #ccc;margin-bottom:30px;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;700&quot;</span> <span class="attr">height</span>=<span class="string">&quot;39&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">style</span>=<span class="string">&quot;font:12px Tahoma, Arial, 宋体;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;210&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:680px;padding:0 10px;margin:0 auto;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;line-height:1.5;font-size:14px;margin-bottom:25px;color:#4d4d4d;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">strong</span> <span class="attr">style</span>=<span class="string">&quot;display:block;margin-bottom:15px;&quot;</span>&gt;</span>尊敬的用户，您好：<span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">style</span>=<span class="string">&quot;color:#f60;font-size: 16px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">strong</span> <span class="attr">style</span>=<span class="string">&quot;display:block;margin-bottom:15px;&quot;</span>&gt;</span></span><br><span class="line">                        您正在进行<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">span</span>&gt;</span>操作，请在验证码输入框中输入：<span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">style</span>=<span class="string">&quot;color:#f60;font-size: 24px&quot;</span>&gt;</span>&#123;&#123; code &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，以完成操作。</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom:30px;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">small</span> <span class="attr">style</span>=<span class="string">&quot;display:block;margin-bottom:20px;font-size:12px;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:#747474;&quot;</span>&gt;</span></span><br><span class="line">                            注意：验证码2分钟有效，此操作可能会修改您的密码。如非本人操作，请及时登录并修改密码以保证帐户安全</span><br><span class="line">                            <span class="tag">&lt;<span class="name">br</span>&gt;</span>（工作人员不会向你索取此验证码，请勿泄漏！)</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:700px;margin:0 auto;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding:10px 10px 0;border-top:1px solid #ccc;color:#747474;margin-bottom:20px;line-height:1.3em;font-size:12px;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>此为系统邮件，请勿回复<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                        请保管好您的邮箱，避免账号被他人盗用</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>XXXXXXX QA团队<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% block js %&#125;&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-效果图如下："><a href="#5-效果图如下：" class="headerlink" title="5.效果图如下："></a>5.效果图如下：</h2><img src="/2021/09/08/Django%E5%8F%91%E9%80%81%E9%82%AE%E7%AE%B1%E9%AA%8C%E8%AF%81%E7%A0%81%E5%AE%9E%E7%8E%B0%E4%BB%A5%E5%8F%8A%E9%82%AE%E7%AE%B1html%E6%A8%A1%E6%9D%BF/img16.png" class title="验证码">
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title>Error taking device screenshot: null</title>
    <url>/2018/10/11/Error-taking-device-screenshot-null/</url>
    <content><![CDATA[<p>使用<code>uiautomatorviewer</code> 查看Android某些页面元素，出现如图错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ Error obtaining UI hierarchy Reason: Error taking device screenshot: null</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/fc8af8463b3e6822ccdd940774759365.png"></p>
<p>再网上找了很多解决办法依然没解决</p>
<p><strong>总结了一下原因：</strong></p>
<p>1、该app不支持该页面的截屏功能所以uiautomatorviewer捕捉不到</p>
<p>2、手机需要重启</p>
<p>3、非原装数据线</p>
<p>4、appium服务异常需要重新连接</p>
<p>5、可以尝试切换USB接口</p>
<p>6、最后可以把手机开发者选项的USB调试撤销权限，在重新获取</p>
<p>　　以上为个人观点，不代表百分百解决，仅供参考！</p>
]]></content>
      <categories>
        <category>Appium</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Appium</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基础命令</title>
    <url>/2019/10/23/Git%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>如果是开发人员，忽略此步骤，从下面大字的开始即可：</p>
<p>项目开始阶段，初始化项目（init），提交本地的代码到仓库，将本地仓库的代码推送到远端库（push）；</p>
<p>项目开发人员从远端库克隆代码到本机（clone），此时本地仅有一个master分支；新建dev分支并切换、在Dev分支中进行开发工作，其实就是修改并提交代码（add+commit）；当开发的dev分支的代码没问题时，将dev分支合并（merge）到master；将master推送到远端分支，至此，其他的项目开发人员就可以查看到你提交的代码了！</p>
<p>dev分支也可以是修复某个bug或者为了开发某个issue建立的，当bug已经修复或issue开发完成时，把dev合并到master之后，就可以把它删除了</p>
<p>git基本命令</p>
<p>初始化：创建一个git仓库，创建之后就会在当前目录生成一个.git的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure>

<p>添加文件：把文件添加到缓冲区</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add filename</span><br></pre></td></tr></table></figure>

<p>添加所有文件到缓冲区（从目前掌握的水平看，和后面加“.”的区别在于，加all可以添加被手动删除的文件，而加“.”不行）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line">$ git add --all</span><br></pre></td></tr></table></figure>



<p>删除文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rm filename</span><br></pre></td></tr></table></figure>

<p>提交：提交缓冲区的所有修改到仓库(注意：如果修改了文件但是没有add到缓冲区，也是不会被提交的)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;提交的说明&quot;</span></span><br></pre></td></tr></table></figure>
<p>commit可以一次提交缓冲区的所有文件</p>
<p>查看git库的状态，未提交的文件，分为两种，add过已经在缓冲区的，未add过的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status -b</span><br></pre></td></tr></table></figure>


<p>比较：如果文件修改了，还没有提交，就可以比较文件修改前后的差异</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git diff filename</span><br></pre></td></tr></table></figure>

<p>查看日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p>版本回退：可以将当前仓库回退到历史的某个版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset</span><br></pre></td></tr></table></figure>

<p>第一种用法：回退到上一个版本（HEAD代表当前版本，有一个^代表上一个版本，以此类推）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure>

<p>第二种用法：回退到指定版本(其中d7b5是想回退的指定版本号的前几位)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset --hard d7b5</span><br></pre></td></tr></table></figure>

<p>查看命令历史：查看仓库的操作历史</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure>


<p>git分支管理 查看分支的情况，前面带*号的就是当前分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure>

<p>创建分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch <span class="string">&quot;分支名&quot;</span></span><br></pre></td></tr></table></figure>

<p>切换当前分支到指定分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout <span class="string">&quot;分支名&quot;</span></span><br></pre></td></tr></table></figure>
<p>创建分支并切换到创建的分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -b <span class="string">&quot;分支名&quot;</span></span><br></pre></td></tr></table></figure>

<p>合并某分支的内容到当前分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge <span class="string">&quot;分支名&quot;</span></span><br></pre></td></tr></table></figure>
<p>删除分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -d <span class="string">&quot;分支名&quot;</span></span><br></pre></td></tr></table></figure>
<p>如果两个分支同时进行了同一个文件的修改和提交，在merge时就会产生冲突，首先要手动打开文件解决冲突，再提交，就相当于进行了merge</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph</span><br></pre></td></tr></table></figure>

<p>新建标签，默认为最新版本，后面加上版本号参数则可指定版本增加标签</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git tag <span class="string">&quot;标签名&quot;</span> <span class="string">&quot;版本号&quot;</span></span><br></pre></td></tr></table></figure>
<p>查看所有标签：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>
<p>查看标签的详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git show <span class="string">&quot;标签名&quot;</span></span><br></pre></td></tr></table></figure>
<p>将tag提交到远端仓库</p>
<p>推送所有tag:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push origin --tags</span><br></pre></td></tr></table></figure>
<p>推送某个tag：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push origin v1.0</span><br></pre></td></tr></table></figure>

<p>git远端库相关</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git://127.0.0.1/abc.git </span><br></pre></td></tr></table></figure>

<p>移除远端仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote remove origin</span><br></pre></td></tr></table></figure>

<p>将本地仓库内容推送到远端仓库(-u 表示第一次推送master分支的所有内容，后面再推送就不需要-u了)，跟commit的区别在于一个是提交到本地仓库，一个是提交到远程仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<p>从远端库更新内容到本地（相当于svn的update），</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure>
<p>tips:如果push的时候，本地和文件和远端文件有冲突，就要先pull、然后手动解决冲突，才能继续push</p>
<p>git记住用户名密码</p>
<p>push的时候默认每次都需输入GitHub的用户名和密码，在git仓库根目录下.git文件夹的config文件末尾增加如下内容，即可记住用户名密码，无需每次推送都输入了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ [credential]</span><br><span class="line">    helper = store</span><br></pre></td></tr></table></figure>

<p>强制推送分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push -f origin master</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP各个status code代表什么意思</title>
    <url>/2019/03/07/HTTP%E5%90%84%E4%B8%AAstatus-code%E4%BB%A3%E8%A1%A8%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</url>
    <content><![CDATA[<p>在介绍状态码之前，要简单讲一下为什么要有状态码这个东西。计算机之间的通信以协议为共同基础，客户端和服务端都按照协议的约定进行通信。HTTP的状态码就在HTTP的协议内，规定了很多的状态。客户端请求服务端后，服务端就返回结果，同时返回状态码。告诉客户端，本次请求是成功了还是失败了，还是要客户端做什么操作。那为什么不使用文本状态码呢？不是更加清晰直观吗？这是因为这些状态协议里面已经规定了，提到状态码，就是表示本条状态。</p>
<p>状态码分为1-5开头的CODE,以下依次说明,请仔细阅读噢</p>
<p><code>1** </code>类状态码称之为Information 状态吗，表示信息正在处理。</p>
<p><code>2** </code>类状态码称为为Success状态码，表示请求正常完成。</p>
<p><code>3** </code>类状态码称之为Redirection 状态码，表示需要客户端进行附加操作（如跳转。重定向）</p>
<p><code>4** </code>类状态码称之为Error状态码，通常是由于客户端的错误导致的。</p>
<p><code>5** </code>类状态吗称为Server Error状态码，通常是服务端的错误导致的。</p>
<p>小结下：状态码分为客户端错误状态码、服务端错误状态码、成功状态码，重定向状态码等。</p>
<p>##1&amp;2</p>
<p>   <code>1**</code> 不常见到哈,直接从2开始讲了</p>
<p>   <code>200(ok)</code>示从客户端成功发出去请求到服务端了,服务端也接收到了这条请求并正确返回</p>
<p>   <code>204 </code> No Content 请求已经成功了，但是却没有返回任何结果（实体）。通常使用php die() exit()函数会引发204状态码</p>
<p>   <code>206 </code>Partial Content 范围请求状态码。</p>
<h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>   <code>301 </code> Moved Permanently 表示你请求的页面资源现在已经转移位置了，你需要到新的地方去需找该页面。这个即重定向，服务器的response首部里会有location字段值来提示。</p>
<p>   <code>302(Found)</code>和<code>301</code>差不多。表示你请求的页面资源现在已经转移位置了，你要到新的地方去寻找。但是新的地方也不是固定的，说不定过几天还要换。不提示用户保存书签，提示用户跳转。</p>
<p>   <code>303 </code>See other .表示你请求的页面中包含着你想要拿到资源的地址。比如你到门卫处去取快递，到了门卫处，大爷说快递已经交给前台了。这个过程会返回303状态码。</p>
<p>   <code>304 </code> Not Modified 表示资源已经找到了，但是和上次相比没有更新。浏览器读取缓存。</p>
<p>   <code>307 </code> Temporary Redirect 临时重定向。</p>
<h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>   <code>400 </code> Bad Request 报文语法错误。</p>
<p>   <code>401 </code> Unauthorized 需要通过HTTP认证（BASIC 或者DIGEST）.</p>
<p>   <code>403 </code> Forbidden 目录、文件权限错误都会报此状态码。 </p>
<p>   <code>404 </code> 服务器上无此资源，一般情况为路径错误。</p>
<h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>   <code>500 </code> Internal Server Error 服务端错误，有可能是WEB应用存在错误。</p>
<p>   <code>502 </code> Internal Server Error服务端错误,有可能是服务端服务以及停止运行。</p>
<p>   <code>503 </code> Serveice Unavailable  服务器超负荷运行。</p>
<p>这些东西，没必要死记硬背。使用的次数多了慢慢就记住了.一开始使用的时候去查下文档就好了。这也是我写此篇博客的原因：留此存证，以备不时之需。</p>
]]></content>
      <categories>
        <category>Https</category>
      </categories>
      <tags>
        <tag>Https</tag>
      </tags>
  </entry>
  <entry>
    <title>ImportError: No module named flask</title>
    <url>/2020/03/06/ImportError-No-module-named-flask/</url>
    <content><![CDATA[<p>1、删除原有的用大写开头的Flask插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip uninstall Flask</span><br></pre></td></tr></table></figure>

<p>2、yum安装 flask</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install python-flask</span><br></pre></td></tr></table></figure>

<p>3、等待安装完成就可以允许程序啦（100%有用）</p>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Iterm2/Mac自带终端工具快速ssh</title>
    <url>/2019/01/26/Iterm2-Mac%E8%87%AA%E5%B8%A6%E7%BB%88%E7%AB%AF%E5%B7%A5%E5%85%B7%E5%BF%AB%E9%80%9Fssh/</url>
    <content><![CDATA[<h2 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h2><p>首先我们在终端本地要写一个登录的脚本，eg：</p>
<p>当然首先要<code>touch login.sh</code> 啦，下面就是脚本文件，比较low，大神勿喷，会更炫酷写法的小伙伴可以自己参考这个思路写，不会的直接复制就好啦</p>
<p>　　</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="comment">#!/usr/bin/expect -f</span></span><br><span class="line">　　<span class="built_in">set</span> hostname [lindex <span class="variable">$argv</span> 0]</span><br><span class="line">　　<span class="built_in">set</span> user [lindex <span class="variable">$argv</span> 1]</span><br><span class="line">　　<span class="built_in">set</span> password [lindex <span class="variable">$argv</span> 2]</span><br><span class="line">　　<span class="built_in">set</span> timeout 30</span><br><span class="line">　　spawn ssh -tt <span class="variable">$user</span>@<span class="variable">$hostname</span>;</span><br><span class="line">　　expect &#123;</span><br><span class="line">　　　　<span class="string">&quot;yes/no&quot;</span> &#123; send <span class="string">&quot;yes\r&quot;</span>;exp_continue &#125;</span><br><span class="line">　　　　<span class="string">&quot;*password:&quot;</span> &#123; send <span class="string">&quot;<span class="variable">$password</span>\r&quot;</span>;&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">　　interact</span><br><span class="line">　　~</span><br></pre></td></tr></table></figure>

<p>如果写好了在sh login.sh 的时候，发现expect不是一个可执行的命令的话，我们还需要下载expect依赖噢，命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt install expect</span><br></pre></td></tr></table></figure>
<p>这个是mac版本的哈,如果小伙伴是windows的推荐去下载cygwin灰常好用哈,下载的时候一路下</p>
<p>一步就好了,中途会让你安装需要的功能,记得安装一下三个依赖包,很重要!(tcl、expect、apt-cyg),</p>
<p>下完就可以奔放了哈,</p>
<p>##二、</p>
<p>下面就来编写我们的懒人登陆ssh啦，其实就是利用“起别名”来实现的，同样的哈，大神勿喷</p>
<p>首先找到启动终端就运行的一个文件<code>bash_profile</code>然后编辑这个文件，输入以下内容：</p>
<p>　　　　</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">alias</span> 别名=<span class="string">&#x27;expect login.sh sship root passwd&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>ps</strong>：别名就是你登陆终端之后输入这个别名就会自动登陆/或者操作你的指令啦！</p>
<p>具体图示如下，因为我是wsl的终端，所以跟mac的启动文件名不一致，但是原理是一样的（windows小伙伴如果也想体验mac终端，可以评论或者私聊）<br><img src="https://img-blog.csdnimg.cn/img_convert/81b5757e6ba93a39660195244f1b4d1b.png">
　　　</p>
]]></content>
      <categories>
        <category>Iterm2</category>
      </categories>
      <tags>
        <tag>Iterm2</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Java线上问题排查</title>
    <url>/2021/07/20/Java%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</url>
    <content><![CDATA[<h2 id="top-查看占用资源信息以及pid"><a href="#top-查看占用资源信息以及pid" class="headerlink" title="top 查看占用资源信息以及pid"></a>top 查看占用资源信息以及pid</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ top </span><br></pre></td></tr></table></figure>

<h2 id="查看pid下绑定线程"><a href="#查看pid下绑定线程" class="headerlink" title="查看pid下绑定线程"></a>查看pid下绑定线程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ top -Hp pid1(进程id)</span><br></pre></td></tr></table></figure>

<h2 id="拿到需要查询的线程pid-转换成16进制"><a href="#拿到需要查询的线程pid-转换成16进制" class="headerlink" title="拿到需要查询的线程pid,转换成16进制"></a>拿到需要查询的线程pid,转换成16进制</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">printf</span> <span class="string">&#x27;%x&#x27;</span> pid2(线程id)  ==&gt; 6a4     <span class="comment">#6a4为输出结果</span></span><br></pre></td></tr></table></figure>

<h2 id="通过jstack讲java信息输出到文本"><a href="#通过jstack讲java信息输出到文本" class="headerlink" title="通过jstack讲java信息输出到文本"></a>通过jstack讲java信息输出到文本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ jstack pid1(进程id) &gt; t.txt</span><br></pre></td></tr></table></figure>

<p><strong>如果jstack报错,请查看 <a href="https://cywhat.cn/2021/07/20/bash-jstack-%E6%9C%AA%E6%89%BE%E5%88%B0%E5%91%BD%E4%BB%A4/">jstack不存在</a></strong></p>
<h2 id="在t-txt文件中查找6a4"><a href="#在t-txt文件中查找6a4" class="headerlink" title="在t.txt文件中查找6a4"></a>在t.txt文件中查找<code>6a4</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim t.txt</span><br><span class="line"></span><br><span class="line">$ /6a4</span><br></pre></td></tr></table></figure>
<h2 id="然后找到自己的collectorl业务代码层具体行数去分析"><a href="#然后找到自己的collectorl业务代码层具体行数去分析" class="headerlink" title="然后找到自己的collectorl业务代码层具体行数去分析"></a>然后找到自己的collectorl业务代码层具体行数去分析</h2>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux/macos安装newman</title>
    <url>/2021/03/22/Linux-macos%E5%AE%89%E8%A3%85newman/</url>
    <content><![CDATA[<p>[已解决]Linux/macos安装newman</p>
<p>一、安装Node环境（<strong>1/2选其一即可</strong>）</p>
<ol>
<li>官网下载node包，并上传到linux服务器</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://nodejs.org/en/download/</span><br></pre></td></tr></table></figure>


<ol start="2">
<li>wget安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://nodejs.org/dist/v15.12.0/node-v15.12.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>安装解压</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -xvf node-v15.12.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>

<ol start="4">
<li> 移动文件夹并重命名</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mv node-v15.12.0-linux-x64 /opt/node-15</span><br></pre></td></tr></table></figure>


<ol start="5">
<li> 配置环境变量</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>加入以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#node </span></span><br><span class="line">$ <span class="built_in">export</span> NODE_HOME=/opt/node-15</span><br><span class="line">$ <span class="built_in">export</span> PATH=<span class="variable">$NODE_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li> 让配置生效</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<ol start="7">
<li> 查看node版本</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node -v  如跟你安装版本一致即安装成功</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210322160240981.png" alt="在这里插入图片描述"></p>
<ol start="8">
<li> 查看npm版本</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm -v  出现版本号即安装成功</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210322160257886.png" alt="在这里插入图片描述"></p>
<p>二、安装newman</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g newman --registry https://registry.npm.taobao.org/</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>提示如下图无需理会</p>
<p><img src="https://img-blog.csdnimg.cn/20210322160330423.png"></p>
<p>查看版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ newman -v</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20210322160401214.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>Newman</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Newman</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中常用来查看进程的命令</title>
    <url>/2018/12/25/Linux%E4%B8%AD%E5%B8%B8%E7%94%A8%E6%9D%A5%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>查看所有运行中的进程:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps aux | less</span><br></pre></td></tr></table></figure>

<p>显示所有进程: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps -A  </span><br><span class="line">$ ps -e</span><br></pre></td></tr></table></figure>

<p>显示进程的树状图:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pstree</span><br></pre></td></tr></table></figure>

<p>查看进程:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netstat -ntlp</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux关闭防火墙</title>
    <url>/2021/09/01/Linux%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99/</url>
    <content><![CDATA[<p><strong>注意:ConterOS7.0以上使用的是firewall，ConterOS7.0以下使用的是iptables</strong></p>
<h2 id="1-查看防火状态"><a href="#1-查看防火状态" class="headerlink" title="1.查看防火状态"></a>1.查看防火状态</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl status firewalld  <span class="comment">#7.0以上</span></span><br><span class="line"></span><br><span class="line">$ service  iptables status  <span class="comment">#7.0以下</span></span><br></pre></td></tr></table></figure>




<h2 id="2-暂时关闭防火墙"><a href="#2-暂时关闭防火墙" class="headerlink" title="2.暂时关闭防火墙"></a>2.暂时关闭防火墙</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ syatemctl stop firewalld     <span class="comment">#7.0以上</span></span><br><span class="line"></span><br><span class="line">$ service  iptables stop      <span class="comment">#7.0以下</span></span><br></pre></td></tr></table></figure>


<h2 id="3-永久关闭防火墙"><a href="#3-永久关闭防火墙" class="headerlink" title="3.永久关闭防火墙"></a>3.永久关闭防火墙</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">disable</span> firewalld    <span class="comment">#7.0以上</span></span><br><span class="line"></span><br><span class="line">$ chkconfig iptables off     <span class="comment">#7.0以下</span></span><br></pre></td></tr></table></figure>




<h2 id="4-重启防火墙"><a href="#4-重启防火墙" class="headerlink" title="4.重启防火墙"></a>4.重启防火墙</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">enable</span> firewalld  <span class="comment">#7.0以上</span></span><br><span class="line"></span><br><span class="line">$ service iptables restart  <span class="comment">#7.0以下</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux快捷进入长目录的方法</title>
    <url>/2018/11/02/Linux%E5%BF%AB%E6%8D%B7%E8%BF%9B%E5%85%A5%E9%95%BF%E7%9B%AE%E5%BD%95%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>1、将上述设置写到家目录的<code>.bashrc</code>文件中（~/.bashrc）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">alias</span> cywhat =<span class="string">&#x27;cd /root/XX/XX/XX/XX&#x27;</span></span><br></pre></td></tr></table></figure>


<p>2、然后让配置生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ./bashrc</span><br></pre></td></tr></table></figure>



<p>3、最后我们输入设置的<code>cywhat</code>（这个名字自己设置）就可以快速进入设置的长目录了</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux管理node版本</title>
    <url>/2021/04/07/Linux%E7%AE%A1%E7%90%86node%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<p>1、安装nvm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>2、nvm会自己添加环境变量，但是需要我们手动让环境变量生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>ps：如果没有环境变量，需要手动添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="subst">$([ -z <span class="string">&quot;<span class="variable">$&#123;XDG_CONFIG_HOME-&#125;</span>&quot;</span> ] &amp;&amp; printf %s <span class="string">&quot;<span class="variable">$&#123;HOME&#125;</span>/.nvm&quot;</span> || printf %s <span class="string">&quot;<span class="variable">$&#123;XDG_CONFIG_HOME&#125;</span>/nvm&quot;</span>)</span>&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> <span class="comment"># This loads nvm</span></span><br></pre></td></tr></table></figure>

<p>3、nvm安装指定版本node</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm install v8.9.0</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210407173742911.png" alt="在这里插入图片描述"></p>
<p>4、切换node版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm use v8.9.0</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210407173820659.png" alt="在这里插入图片描述"></p>
<p>5、查看node版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20210407173858582.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux部署easy_mock</title>
    <url>/2021/04/16/Linux%E9%83%A8%E7%BD%B2easy-mock/</url>
    <content><![CDATA[<p>前期准备：<br>1、Linux：CentOS Linux release 7.8.2003 (Core)<br>2、mongodb：3.4.24<br>3、redis：4.0.14<br>4、node：8.9.0</p>
<p><strong>PS：</strong></p>
<blockquote>
<p>node版本不要超过8.x.x<br>mongodb版本不要超过3.6.x</p>
</blockquote>
<h2 id="mongodb安装"><a href="#mongodb安装" class="headerlink" title="mongodb安装"></a>mongodb安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载mongodb包</span></span><br><span class="line">$ curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.4.24.tgz  </span><br><span class="line"></span><br><span class="line"><span class="comment">#解压  </span></span><br><span class="line">$ tar -zxvf mongodb-linux-x86_64-3.4.24.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment">#重命名mongodb</span></span><br><span class="line">$ mv mongodb-linux-x86_64-3.4.24 mongodb</span><br><span class="line"> </span><br><span class="line"><span class="comment">#编辑环境变量</span></span><br><span class="line">$ vi ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#环境变量</span></span><br><span class="line">$ <span class="built_in">export</span> MONGO_HOME=/usr/<span class="built_in">local</span>/mongodb</span><br><span class="line">$ <span class="built_in">export</span> PATH=<span class="variable">$MONGO_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#让环境变量生效</span></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>安装好mongodb以后创建mongodb数据存放目录和日志存放目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##  创建数据目录</span></span><br><span class="line">$ <span class="built_in">cd</span> /root/</span><br><span class="line">$ mkdir -p /mongodb/data</span><br><span class="line">$ mkdir -p /mongodb/<span class="built_in">log</span>/</span><br></pre></td></tr></table></figure>

<p>启动mongodb(并保持后台运行)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#后台启动mongodb</span></span><br><span class="line">$ mongod  --dbpath=/root/mongodb/data --logpath=/root/mongodb/<span class="built_in">log</span>/mongodb.log --logappend &amp;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--fork    	 后台运行</span><br><span class="line">--dbpath  	 数据存放目录</span><br><span class="line">--logpath 	 日志存放目录</span><br><span class="line">--logappend  防止日志被删除</span><br></pre></td></tr></table></figure>
<h2 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载redis包</span></span><br><span class="line">$ wget http://download.redis.io/releases/redis-4.0.14.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">$ tar -xvzf redis-4.0.14.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#重命名</span></span><br><span class="line">$ mv redis-4.0.14 redis</span><br><span class="line">$ <span class="built_in">cd</span> redis-4.0.14/</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装gcc依赖</span></span><br><span class="line">$ yum -y install gcc          </span><br><span class="line"></span><br><span class="line"><span class="comment">#编译</span></span><br><span class="line">$ make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如报错可使用命令 </span></span><br><span class="line">$ make MALLOC=libc</span><br><span class="line"></span><br><span class="line"><span class="comment">#拷贝执行程序到bin</span></span><br><span class="line">$ cp src/redis-server /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">$ cp src/redis-cli /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑redis配置文件</span></span><br><span class="line">$ vi redis.conf 修改daemonize=no为yes，保存</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动redis并保持后台运行</span></span><br><span class="line">$ redis-server redis.conf &amp;</span><br></pre></td></tr></table></figure>

<h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span><br><span class="line"> </span><br><span class="line"><span class="comment">#安装wget               </span></span><br><span class="line">$ yum install -y wget</span><br><span class="line"></span><br><span class="line"><span class="comment">#wget下载node包</span></span><br><span class="line">$ wget https://npm.taobao.org/mirrors/node/v8.9.0/node-v8.9.0-linux-x64.tar.xz</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压安装</span></span><br><span class="line">$ tar -zxvf node-v8.9.0-linux-x64.tar</span><br><span class="line"></span><br><span class="line"><span class="comment">#重命名node文件</span></span><br><span class="line">$ mv node-v8.9.0 node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改环境变量</span></span><br><span class="line">$ vi ~/.bashrc              </span><br><span class="line"></span><br><span class="line"><span class="comment">#环境变量</span></span><br><span class="line">$ <span class="built_in">export</span> NODE_HOME=/usr/<span class="built_in">local</span>/node</span><br><span class="line">$ <span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$NODE_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment">#让环境变量生效</span></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看node版本</span></span><br><span class="line">$ node -v</span><br></pre></td></tr></table></figure>


<h2 id="安装easy-mock"><a href="#安装easy-mock" class="headerlink" title="安装easy_mock"></a>安装easy_mock</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装git</span></span><br><span class="line">$ yum install -y git     </span><br><span class="line"></span><br><span class="line"><span class="comment">#下载easymock包                              </span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/easy-mock/easy-mock.git</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入文件夹</span></span><br><span class="line">$ <span class="built_in">cd</span> easy-mock</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">$ npm install            </span><br><span class="line"></span><br><span class="line"><span class="comment">#安装较慢，可以多试几次。也可以使用cnpm安装，需要先执行命令</span></span><br><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment">#然后在执行</span></span><br><span class="line">$ cnpm install</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭防火墙</span></span><br><span class="line">$ systemctl stop firewalld.service(这里如果是阿里云服务器需要安全组给7300端口放行)</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装pm2 守护进程</span></span><br><span class="line">$ npm install -g pm2</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译</span></span><br><span class="line">$ npm run build</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">$ NODE_ENV=production pm2 start app.js  注意这里如果是Windows系统前面需要加cross-env  反之mac或者linux不需要</span><br><span class="line"></span><br><span class="line"><span class="comment">#如启动报错File ecosystem config.js not found</span></span><br><span class="line">$ pm2 ecosystem 然后在重新运行即可</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#运行</span></span><br><span class="line">$ npm run start</span><br></pre></td></tr></table></figure>




<p>疑难杂症</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#如遇无法登录注册，js报错net::ERR_CONNECTION_REFUSED</span></span><br><span class="line"></span><br><span class="line">说明你的mongodb有问题，可能是没有后台运行导致，查看mongodb状态即可</span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#最后的最后，作为重度强迫症患者，必须要把下载到/usr/local/中的包删除掉</span></span><br><span class="line"></span><br><span class="line">$ rm -rf mongodb-linux-x86_64-3.4.24.tgz redis-4.0.14.tar.gz node-v8.9.0-linux-x64.tar</span><br></pre></td></tr></table></figure>

<p>如报错如下图<br><img src="https://img-blog.csdnimg.cn/202106021623202.png" alt="在这里插入图片描述"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先修改easy_mock/config目录下的default.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;port&quot;</span>: 7300,</span><br><span class="line">  <span class="string">&quot;host&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;pageSize&quot;</span>: 30,</span><br><span class="line">  <span class="string">&quot;proxy&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;db&quot;</span>: <span class="string">&quot;mongodb://127.0.0.1/easy-mock&quot;</span>,   这里要把mongodb更改为127.0.0.1</span><br><span class="line">  <span class="string">&quot;unsplashClientId&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2021060216262774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW95YW5nX28=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#然后重新build</span></span><br><span class="line">$ npm run build </span><br><span class="line"></span><br><span class="line"><span class="comment">#启动app</span></span><br><span class="line">$ NODE_ENV=production pm2 start app</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Easy_mock</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Easy_mock</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac忽略系统更新提醒，并取消小红点</title>
    <url>/2021/09/07/Mac%E5%BF%BD%E7%95%A5%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0%E6%8F%90%E9%86%92%EF%BC%8C%E5%B9%B6%E5%8F%96%E6%B6%88%E5%B0%8F%E7%BA%A2%E7%82%B9/</url>
    <content><![CDATA[<h2 id="1-首先关掉系统的自动更新设置"><a href="#1-首先关掉系统的自动更新设置" class="headerlink" title="1.首先关掉系统的自动更新设置**"></a>1.首先关掉系统的自动更新设置**</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ 1.系统偏好设置--软件更新</span><br><span class="line"></span><br><span class="line">$ 2.取消选择<span class="string">&quot;自动保持我的Mac最新&quot;</span></span><br><span class="line"></span><br><span class="line">$ 3.高级--取消所有按钮勾选</span><br></pre></td></tr></table></figure>
<img src="/2021/09/07/Mac%E5%BF%BD%E7%95%A5%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0%E6%8F%90%E9%86%92%EF%BC%8C%E5%B9%B6%E5%8F%96%E6%B6%88%E5%B0%8F%E7%BA%A2%E7%82%B9/img15.png" class title="This is an image">


<h2 id="2-执行代码"><a href="#2-执行代码" class="headerlink" title="2.执行代码"></a>2.执行代码</h2><p><strong>以下操作需要在终端中进行</strong></p>
<h3 id="1-忽略大版本更新"><a href="#1-忽略大版本更新" class="headerlink" title="1.忽略大版本更新"></a>1.忽略大版本更新</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo softwareupdate --ignore <span class="string">&quot;macOS Catalina&quot;</span></span><br><span class="line"></span><br><span class="line">$ sudo softwareupdate --ignore <span class="string">&quot;macOS Mojave&quot;</span></span><br><span class="line"></span><br><span class="line">$ sudo softwareupdate --ignore <span class="string">&quot;macOS Big Sur&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-取消小红点"><a href="#2-取消小红点" class="headerlink" title="2.取消小红点"></a>2.取消小红点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ defaults write com.apple.systempreferences AttentionPrefBundleIDs 0</span><br><span class="line"></span><br><span class="line">$ killall Dock  </span><br></pre></td></tr></table></figure>

<h3 id="3-恢复更新提示"><a href="#3-恢复更新提示" class="headerlink" title="3.恢复更新提示"></a>3.恢复更新提示</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo softwareupdate --reset-ignored</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Postmant压力测试</title>
    <url>/2019/03/28/Postmant%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>Postman请自行下载</p>
<p>下面是在网上随便抓了一个请求地址来做演示，把请求地址填入地址栏，此请求为GET请求。点击Send发送请求，请求结果将会在下方显示出来。每次的请求历史数据，会被记录下来，但是经常使用的请求，还是保存一下，这么每次用的时候，选择就行了，及其方便。</p>
<p>另外，最好创建一个账号，这样数据将会永久保存下来，不至于重装了系统或者换了台电脑数据都没了的尴尬。<br><img src="https://img-blog.csdnimg.cn/img_convert/3fea11cd00cc15c65ffa0d8b20d86677.png"></p>
<p>保存的时候起个好听的名字<br><img src="https://img-blog.csdnimg.cn/img_convert/93990e6ee3e367ae2cf87a9116a26bdd.png"></p>
<p>Header会传输一些我们需要的一些通用的数据，定义好之后，每个接口几乎都是一样的。所以，把这些数据进行预置，这样就不用每新建一个请求，都要重复的添加Header了。</p>
<p>请求的时候，会把请求状态，请求的时间，以及返回的数据大小返回回来。这样一目了然。最常见的status就是200表示成功，400表示未找到资源。500开头的基本都是服务端异常等等。我之前写了一篇很详细的状态说明，请参见<a href="https://cywhat.cn/2019/03/07/http%E5%90%84%E4%B8%AAstatus-code%E4%BB%A3%E8%A1%A8%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/">HTTP状态码大全</a><br><img src="https://img-blog.csdnimg.cn/img_convert/21001692b3f24989dd93c7370f6c0fe9.png"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/1ee94aec5573735267fb282f90377d93.png"></p>
<p>点击params可以把url里的参数以列表的形式展现出来，方便编写<br><img src="https://img-blog.csdnimg.cn/img_convert/ea54d62217323e9b20b0d03b28306f3e.png"></p>
<p>还有一种更方便的编辑方式，点击Bulk Edit ，直接修改字符串的方式修改，而且可以复制粘贴，方便迁移到其它地方。而且这个功能在其它参数编辑的地方都适用。<br><img src="https://img-blog.csdnimg.cn/img_convert/ce04535d4f95cd16f1c858a42a7724b3.png"></p>
<p>我们来看看如何发送POST接口<br><img src="https://img-blog.csdnimg.cn/img_convert/50e16c6c51ccd922142639c8bc06e7c9.png"></p>
<p>form-data、x-www-form-urlencoded、raw、binary的区别</p>
<p>x-www-form-urlencoded</p>
<p>当用户通过form表单提交数据的时候，例如：</p>
<pre><code>&lt;form method=&quot;post&quot;action=&quot;http://api.test.com/user&quot; &gt;
 &lt;inputtype=&quot;text&quot; name=&quot;name&quot;&gt;
 &lt;inputtype=&quot;text&quot; name=&quot;age&quot;&gt;
&lt;/form&gt;
</code></pre>
<p>提交时会向服务器端发出这样的数据（已经去除部分不相关的头信息），数据如下：</p>
<pre><code>POST /user HTTP/1.1
Content-Type:application/x-www-form-urlencoded
Accept-Encoding: gzip, deflate
Host: api.test.com
Content-Length: 21
Connection: Keep-Alive
Cache-Control: no-cache
name=互扯程序&amp;age=18
</code></pre>
<p>它的Content-Type是application/x-www-form-urlencoded，这表示消息内容会经过URL编码</p>
<p>form-data</p>
<p>当需要上传文件（可以上传多个文件），并且有参数同时传递的时候，选择这个选项可以上传文件。</p>
<p>举个例子</p>
<pre><code>&lt;form method=&quot;post&quot;action=&quot;http://api.test.com/user/upload.do&quot; enctype=”multipart/form-data”&gt;
&lt;inputtype=&quot;text&quot; name=&quot;desc&quot;&gt;
&lt;inputtype=&quot;file&quot; name=&quot;pic&quot;&gt;
&lt;/form&gt;
</code></pre>
<p>浏览器将会发送以下数据：</p>
<pre><code>POST /user/upload.do HTTP/1.1
Accept-Language: zh-cn,zh;q=0.5
Accept-Charset: GBK,utf-8;q=0.7,*;q=0.7
Connection: keep-alive
Content-Length: 60408
Content-Type:multipart/form-data; boundary=ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC
Host: api.test.com
</code></pre>
<p>我们看到Content-Type:multipart/form-data;</p>
<p>当需要上传数据的时候，必须设置enctype=“multipart/form-data”，</p>
<p>enctype：规定在发送到服务器之前应该如何对表单数据进行编码，他有如下的三个值：</p>
<ol>
<li><p>application/x-www-form-urlencoded。默认的编码方式。所有字符都会进行编码（空格转换为 “+” 加号，特殊符号转换为 ASCII HEX 值）。</p>
</li>
<li><p>multipart/form-data 。 指定传输数据为二进制类型，比如图片、mp3、文件。 不对字符编码。在使用包含文件上传控件的表单时，必须使用该值。</p>
</li>
<li><p>text/plain。纯文体的传输。空格转换为 “+” 加号，但不对特殊字符编码。</p>
</li>
</ol>
<p>其实form表单在你不写enctype属性时，也默认为其添加了enctype属性值，默认值是enctype=”application/x- www-form-urlencoded”，所以上面注册用户的时候虽然没写，其实默认加上了。</p>
<p>raw</p>
<p>当需要给服务端传递json，xml等数据的时候选择raw，当选择了raw的时候，header里会自动加上</p>
<p>Content-Type: application/json</p>
<p>例如：</p>
<pre><code>$.ajax(&#123;
    url:&quot;/user/&quot;,
    data:JSON.stringify(user),
     method:&quot;POST&quot;,
     contentType:&quot;application/json&quot;,
     success: function(res)&#123;
        console.info(&quot;添加成功&quot;)
    &#125;
&#125;);
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/img_convert/bb7480fa9fc9f24c23f6d9be8029e579.png"></p>
<p>binary（注意了这个格式这里可以上传你的压测数据文件）</p>
<p>PS：压测文件可以是csv格式跟json格式的</p>
<p>这里还可以在Pre-requestScript”中设置环境变量 “username”, “password”,在Body 中选取”form-data” 格式，输入所需的key-value, value即为变量, 。</p>
<pre><code>postman.setEnvironmentVariable(&quot;username&quot;,data[&quot;username&quot;]);
postman.setEnvironmentVariable(&quot;password&quot;,data[&quot;password&quot;]);
</code></pre>
<p>然后再Tests里添加断言</p>
<pre><code>tests[&quot;Status code is 200&quot;] = responseCode.code === 200;
tests[&quot;Response time is less than 10000ms&quot;] = responseTime &lt; 10000;
console.log(responseTime);
</code></pre>
<p>只能上传一个文件，也不能添加参数。<br><img src="https://img-blog.csdnimg.cn/img_convert/6c381a1e9ae7b4a4c0c44e6e95059f97.png"></p>
<p>压力测试</p>
<p>当你需要验证你的接口的抗压能力的时候，可以点击Runner，进行压力测试<br><img src="https://img-blog.csdnimg.cn/img_convert/c0d4f4547adb0e3cdc15e54704abf20a.png"></p>
<p>注意：压力测试只能以文件夹的方式执行多个接口，不能单独执行，如果想要测试某一个接口，就创一个文件夹，这个文件夹里只有一个要测试的接口。<br><img src="https://img-blog.csdnimg.cn/img_convert/59da6db4f53379ce7f7d72a91ff303c1.png"></p>
<p>点击执行，并发执行了500次。每次再100毫秒内返回结果。<br><img src="https://img-blog.csdnimg.cn/img_convert/d5a05c7b0316c18fd005f72ed4a16f63.png"></p>
]]></content>
      <categories>
        <category>Postman</category>
      </categories>
      <tags>
        <tag>Postman</tag>
      </tags>
  </entry>
  <entry>
    <title>Python+virtualenv+Django+nginx+uwsgi+centos7部署web应用</title>
    <url>/2021/03/11/Python-virtualenv-Django-nginx-uwsgi-centos7%E9%83%A8%E7%BD%B2web%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>给公司写的一个工具平台，先部署到自己的服务器上进行测试，真是困难重重，此文章仅记录自己踩坑过程和搭建教程，不保证你能按照教程成功搭建，但能把坑提前暴露出来，避免大家重复踩坑！</p>
<h2 id="我的环境"><a href="#我的环境" class="headerlink" title="我的环境"></a>我的环境</h2><ol>
<li><strong>部署服务器</strong> ：CentOS Linux release 7.8.2003 (Core)</li>
<li><strong>Python</strong>：3.7.0</li>
<li><strong>Django</strong> ：1.11.7</li>
<li><strong>Nginx</strong>：1.16.1</li>
<li><strong>Uwsgi</strong>：2.0.19.1</li>
<li><strong>操作机</strong>：mac + iterm2</li>
</ol>
<h2 id="1、上传-clone项目至服务器"><a href="#1、上传-clone项目至服务器" class="headerlink" title="1、上传/clone项目至服务器"></a>1、上传/clone项目至服务器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git/xftp均可</span><br></pre></td></tr></table></figure>


<h2 id="2、安装python3-7-0"><a href="#2、安装python3-7-0" class="headerlink" title="2、安装python3.7.0"></a>2、安装python3.7.0</h2><p>安装python3.7.0：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz</span><br></pre></td></tr></table></figure>
<p>解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -xvzf Python-3.7.0.tgz</span><br></pre></td></tr></table></figure>

<p>进入文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> Python-3.7.0</span><br></pre></td></tr></table></figure>

<p>执行配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./configure --with-ssl</span><br></pre></td></tr></table></figure>

<p>编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make    </span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>

<p>建立软连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ln -s /usr/<span class="built_in">local</span>/python3/bin/python3.7 /usr/bin/python3</span><br><span class="line">$ ln -s /usr/<span class="built_in">local</span>/python3/bin/pip3.7 /usr/bin/pip3</span><br></pre></td></tr></table></figure>

<p>检测python3版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  python3 -V</span><br></pre></td></tr></table></figure>


<h2 id="安装虚拟环境"><a href="#安装虚拟环境" class="headerlink" title="安装虚拟环境"></a>安装虚拟环境</h2><p>1、安装虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip3 install virtualenv</span><br></pre></td></tr></table></figure>

<p>2、新建虚拟环境文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir pyenv</span><br></pre></td></tr></table></figure>

<p>3、进入虚拟环境文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> pyenv</span><br></pre></td></tr></table></figure>

<p>4、安装虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ virtualenv  -p python3 myenv</span><br></pre></td></tr></table></figure>

<p>5、激活虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> /myenv/bin/activate</span><br></pre></td></tr></table></figure>

<p>6、安装项目所需组件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip3 install -r requriements.txt</span><br></pre></td></tr></table></figure>

<p>7、pip安装依赖太慢使用douban源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install xx -i http://pypi.douban.com/simple/</span><br></pre></td></tr></table></figure>

<h2 id="安装uwsgi"><a href="#安装uwsgi" class="headerlink" title="安装uwsgi"></a>安装uwsgi</h2><p>1、安装uwsgi</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip3 install uwsgi</span><br></pre></td></tr></table></figure>

<p>2、在项目根目录添加 .ini 结尾的uwsgi配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ touch uwsgi.ini (这里的uwsgi可以自己命名)</span><br></pre></td></tr></table></figure>

<p>3、修改uwsgi.ini配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line"><span class="comment">#http只能用于wusgi自己调试 要跟nginx通信需要用sockt 使用内网ip</span></span><br><span class="line"><span class="comment">#http=111.11.11.1:9003  </span></span><br><span class="line">socket = 111.11.11.1:9001</span><br><span class="line"></span><br><span class="line"><span class="comment">#项目根目录</span></span><br><span class="line"><span class="built_in">chdir</span> = /root/mydjango/</span><br><span class="line"></span><br><span class="line"><span class="comment">#django应用的wsgi文件</span></span><br><span class="line">wsgi-file = mydjango/wsgi.py</span><br><span class="line"></span><br><span class="line"><span class="comment">#弃用主进程</span></span><br><span class="line">master = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">vacuum = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">processes = 4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">threads = 2</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动uwsgi之后的pid文件存储位置</span></span><br><span class="line">pidfile = /root/mydjango/uwsgi.pid</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动uwsgi产生的日志存放位置</span></span><br><span class="line">daemonize = /root/mydjango/uwsgi.log</span><br></pre></td></tr></table></figure>

<p>这里先不启动uwsgi，后面等nginx安装好了一起启动即可</p>
<h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><p>1、安装依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>

<p>2、下载nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  wget http://nginx.org/download/nginx-1.16.1.tar.gz </span><br></pre></td></tr></table></figure>

<p>3、新建文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir /usr/loacl/nginx</span><br></pre></td></tr></table></figure>

<p>4、解压nginx包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -zxvf nginx-1.16.1.tar.gz</span><br></pre></td></tr></table></figure>

<p>5、进入解压后的nginx目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> nginx-1.16.1/</span><br></pre></td></tr></table></figure>

<p>6、编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./configure  --prefix=/usr/<span class="built_in">local</span>/nginx</span><br></pre></td></tr></table></figure>

<p>7、安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>8、修改nginx.conf配置即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>

<p>修改内容如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80; <span class="comment">#这里80端口要注意别被其他程序占用</span></span><br><span class="line">        listen       [::]:80</span><br><span class="line">        server_name  xxx.xxx.xx.x; <span class="comment">#这里的ip要换成外网可以访问的ip</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line">		location /static &#123;</span><br><span class="line">            <span class="built_in">alias</span> /root/mydjango/web/static/; <span class="comment">#这里放的是django的静态文件目录</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        location / &#123;</span><br><span class="line">            include uwsgi_params;    </span><br><span class="line">            uwsgi_pass XXX.XX.XX.X:9001;<span class="comment">#这里的ip就是上面配置的uwsgi的ip和端口</span></span><br><span class="line">            uwsgi_read_timeout 2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>启动nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/loacl/nginx/sbin</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./nginx</span><br></pre></td></tr></table></figure>


<h2 id="django项目数据库迁移"><a href="#django项目数据库迁移" class="headerlink" title="django项目数据库迁移"></a>django项目数据库迁移</h2><p>1、进入虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> /myenv/bin/activate</span><br></pre></td></tr></table></figure>

<p>2、迁移数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 manage.py makemigrations</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 manage.py migrate</span><br></pre></td></tr></table></figure>

<p>3、迁移静态文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 manage.py collectstatic</span><br></pre></td></tr></table></figure>



<h2 id="启动uwsgi"><a href="#启动uwsgi" class="headerlink" title="启动uwsgi"></a>启动uwsgi</h2><p>1、启动uwsgi</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ uwsgi -d --ini uwsgi.ini <span class="comment"># -d 可以让uwsgi保持在后台运行</span></span><br></pre></td></tr></table></figure>


<h2 id="疑难解答"><a href="#疑难解答" class="headerlink" title="疑难解答"></a>疑难解答</h2><p>1、启动uwsgi.ini报错</p>
<p>WARNING: Can’t find section “uwsgi” in INI configuration file uwsgi.ini</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ 原因：uwsgi.ini头部没有添加[uwsgi] 头部文件 添加完成以后即可</span><br></pre></td></tr></table></figure>

<p>2、部署项目完成以后，而且静态资源也已经迁移，访问资源还是403，修改nginx的使用用户为root即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#有些nginx安装完成后这句是注释的 打开即可</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210311170330559.png" alt="在这里插入图片描述"></p>
<p>3、nginx部署完成后，出现-bash: nginx: command not found 添加nginx的环境变量即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/profile</span><br></pre></td></tr></table></figure>

<p>在末尾加入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ PATH=<span class="variable">$PATH</span>:/var/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line">$ <span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure>

<p>然后让配置生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> /etc/prifile</span><br></pre></td></tr></table></figure>

<p>然后就可以使用nginx快捷命令了</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Linux</tag>
        <tag>Django</tag>
        <tag>Nginx</tag>
        <tag>Uwsgi</tag>
        <tag>Virtualenv</tag>
      </tags>
  </entry>
  <entry>
    <title>Shadowrocket小火箭配置规则文件</title>
    <url>/2021/07/20/Shadowrocket%E5%B0%8F%E7%81%AB%E7%AE%AD%E9%85%8D%E7%BD%AE%E8%A7%84%E5%88%99%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="国内外划分-广告过滤"><a href="#国内外划分-广告过滤" class="headerlink" title="国内外划分+广告过滤"></a>国内外划分+广告过滤</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ https://raw.githubusercontent.com/chaoyangya/cywhat-block-ad/master/cywhat-block-ad.conf</span><br></pre></td></tr></table></figure>

<h2 id="黑名单-国内外划分无广告过滤"><a href="#黑名单-国内外划分无广告过滤" class="headerlink" title="黑名单(国内外划分无广告过滤)"></a>黑名单(国内外划分无广告过滤)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ https://raw.githubusercontent.com/chaoyangya/cywhat-block-ad/master/cywhat-no-block-ad.conf</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Shadowrocket</category>
      </categories>
      <tags>
        <tag>Shadowrocket</tag>
      </tags>
  </entry>
  <entry>
    <title>Tampermonkey+脚本+Aira2GUI直链下载百度网盘资源</title>
    <url>/2021/09/03/Tampermonkey-%E8%84%9A%E6%9C%AC-Aira2GUI%E7%9B%B4%E9%93%BE%E4%B8%8B%E8%BD%BD%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p>前景：<br><strong>各大LM运营限制带宽速度，导致必须要成为尊贵的VIP客户才能勉强享受到自己的带宽</strong></p>
<p>PS：我这里屎以chrome浏览器举例，其他不保证成功，可借鉴</p>
<h2 id="1-Chrome浏览器下载Tampermonkey"><a href="#1-Chrome浏览器下载Tampermonkey" class="headerlink" title="1.Chrome浏览器下载Tampermonkey"></a>1.Chrome浏览器下载Tampermonkey</h2><p><a href="https://www.tampermonkey.net/">Tampermonkey</a><br>点击安装</p>
<img src="/2021/09/03/Tampermonkey-%E8%84%9A%E6%9C%AC-Aira2GUI%E7%9B%B4%E9%93%BE%E4%B8%8B%E8%BD%BD%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E8%B5%84%E6%BA%90/img10.png" class title="This is an test image">

<h2 id="2-安装脚本"><a href="#2-安装脚本" class="headerlink" title="2.安装脚本"></a>2.安装脚本</h2><p><a href="https://greasyfork.org/zh-CN/scripts/418182-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%AE%80%E6%98%93%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B-%E7%9B%B4%E9%93%BE%E4%B8%8B%E8%BD%BD%E5%A4%8D%E6%B4%BB%E7%89%88">直链脚本</a></p>
<img src="/2021/09/03/Tampermonkey-%E8%84%9A%E6%9C%AC-Aira2GUI%E7%9B%B4%E9%93%BE%E4%B8%8B%E8%BD%BD%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E8%B5%84%E6%BA%90/img11.png" class title="This is an test image">

<h2 id="3-下载Aira2GUI"><a href="#3-下载Aira2GUI" class="headerlink" title="3.下载Aira2GUI"></a>3.下载Aira2GUI</h2><p><a href="https://pan.baidu.com/s/16Rdw8_dd2H8byEWQliR1Gg">Mac版</a><br>验证码：vb7r</p>
<p><a href="https://pan.baidu.com/s/1XtpjUz-PoMHebg6IJugsCg">Win版</a><br>验证码：5s6i</p>
<h2 id="4-安装Aira2GUI"><a href="#4-安装Aira2GUI" class="headerlink" title="4.安装Aira2GUI"></a>4.安装Aira2GUI</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#windows版本exe需要文件夹中允许，需要创建快捷方式请邮件，请勿直接拖拽</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mac版本解压完成将app存储到应用程序中即可</span></span><br></pre></td></tr></table></figure>

<h2 id="5-打开百度网盘，刷新页面"><a href="#5-打开百度网盘，刷新页面" class="headerlink" title="5.打开百度网盘，刷新页面"></a>5.打开百度网盘，刷新页面</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#刷新百度网盘页面，找到需要下载的文件勾选，选择页面上方出现的&quot;简易下载助手&quot;</span></span><br></pre></td></tr></table></figure>
<img src="/2021/09/03/Tampermonkey-%E8%84%9A%E6%9C%AC-Aira2GUI%E7%9B%B4%E9%93%BE%E4%B8%8B%E8%BD%BD%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E8%B5%84%E6%BA%90/img12.png" class title="This is an test image">

<h2 id="6-生成直链"><a href="#6-生成直链" class="headerlink" title="6.生成直链"></a>6.生成直链</h2><img src="/2021/09/03/Tampermonkey-%E8%84%9A%E6%9C%AC-Aira2GUI%E7%9B%B4%E9%93%BE%E4%B8%8B%E8%BD%BD%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E8%B5%84%E6%BA%90/img13.png" class title="This is an test image">
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首次生成需要关注公众号获取验证码</span></span><br></pre></td></tr></table></figure>

<h2 id="7-打开Aira2GUI，传递直链"><a href="#7-打开Aira2GUI，传递直链" class="headerlink" title="7.打开Aira2GUI，传递直链"></a>7.打开Aira2GUI，传递直链</h2><img src="/2021/09/03/Tampermonkey-%E8%84%9A%E6%9C%AC-Aira2GUI%E7%9B%B4%E9%93%BE%E4%B8%8B%E8%BD%BD%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E8%B5%84%E6%BA%90/img14.png" class title="This is an test image">

<h2 id="8-切换至Aira2GUI"><a href="#8-切换至Aira2GUI" class="headerlink" title="8.切换至Aira2GUI"></a>8.切换至Aira2GUI</h2><img src="/2021/09/03/Tampermonkey-%E8%84%9A%E6%9C%AC-Aira2GUI%E7%9B%B4%E9%93%BE%E4%B8%8B%E8%BD%BD%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E8%B5%84%E6%BA%90/img15.png" class title="This is an test image">
]]></content>
      <categories>
        <category>Tampermonkey</category>
      </categories>
      <tags>
        <tag>Tampermonkey</tag>
      </tags>
  </entry>
  <entry>
    <title>bash:jstack: 未找到命令</title>
    <url>/2021/07/20/bash-jstack-%E6%9C%AA%E6%89%BE%E5%88%B0%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="jstack报错如下"><a href="#jstack报错如下" class="headerlink" title="jstack报错如下"></a>jstack报错如下</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ -bash: jstack: 未找到命令</span><br></pre></td></tr></table></figure>
<p><img src="/2021/07/20/bash-jstack-%E6%9C%AA%E6%89%BE%E5%88%B0%E5%91%BD%E4%BB%A4/images/img3.png" alt="img.png"></p>
<h2 id="安装以下依赖"><a href="#安装以下依赖" class="headerlink" title="安装以下依赖"></a>安装以下依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install java-1.7.0-openjdk-devel -y</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7安装mysql5.7亲测可用</title>
    <url>/2020/03/30/centos7%E5%AE%89%E8%A3%85mysql5-7%E4%BA%B2%E6%B5%8B%E5%8F%AF%E7%94%A8/</url>
    <content><![CDATA[<p>一 安装前准备<br>1、检查是否已经安装过mysql，执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -qa | grep mysql</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2020033015134267.png" alt="在这里插入图片描述"><br>2、查询所有Mysql对应的文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ whereis mysql</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200330151234488.png" alt="在这里插入图片描述"></p>
<p>如果有的话请删除相关目录或文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rm -rf /usr/<span class="built_in">local</span>/mysql</span><br></pre></td></tr></table></figure>

<p>并再次执行<code>whereis mysql </code>验证是否删除完毕</p>
<p>3、检查mysql用户组和用户是否存在，如果没有，则创建</p>
<pre><code>1)、查看是否存在组
</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat /etc/group | grep mysql</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200330151632701.png" alt="在这里插入图片描述"><br>我的是已经创建过了，所以就不创建了</p>
<p>没有的话需要创建用户跟用户组</p>
<pre><code>2)、创建用户组跟用户
</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ groupadd mysql   创建用户组</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ useradd -r -g mysql mysql   创建用户且属于mysql用户组</span><br></pre></td></tr></table></figure>

<p>4、从官网下载是用于Linux的Mysql安装包</p>
<p>下载命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200330152105124.png" alt="在这里插入图片描述"><br>也可以直接到mysql官网选择其他版本进行下载。</p>
<p>二 安装Mysql<br>1、解压mysql安装包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -zvxf mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure>
<p>解压完之后会在当前目录生成 <code>mysql-5.7.24-linux-glibc2.12-x86_64</code>这样的文件夹</p>
<p>移动该文件到/usr/local/下 并将文件夹名称修改为mysql 如果/usr/local/下已经存在mysql 将已存在mysql文件修改为其他名称 否则后续步骤可能无法正确进行 </p>
<p>移动并将文件夹命名为mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mv mysql-5.7.24-linux-glibc2.12-x86_64 /usr/<span class="built_in">local</span>/mysql</span><br></pre></td></tr></table></figure>

<p>2、在/usr/local/mysql目录下创建data目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir /usr/<span class="built_in">local</span>/mysql/data  </span><br></pre></td></tr></table></figure>

<p>3、更改mysql目录下所有的目录及文件夹所属的用户组和用户，以及权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/ </span><br><span class="line"></span><br><span class="line">$ chown -R mysql mysql/</span><br><span class="line"></span><br><span class="line">$ chgrp -R mysql mysql/</span><br></pre></td></tr></table></figure>


<p>4、编译安装并初始化mysql,务必记住初始化输出日志末尾的密码（数据库管理员临时密码）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mysql/bin/ 进入到bin目录进行编译安装</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./mysqld --initialize --user=mysql --basedir=/usr/<span class="built_in">local</span>/mysql/ --datadir=/usr/<span class="built_in">local</span>/mysql/data/ --lc_messages_dir=/usr/<span class="built_in">local</span>/mysql/share --lc_messages=en_US </span><br></pre></td></tr></table></figure>

<p>补充说明：<br>第4步时，可能会出现错误：</p>
<p>依次执行以下命令安装编译mysql需要的插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install  libaio-devel.x86_64</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install numactl</span><br></pre></td></tr></table></figure>


<p>5、运行初始化命令成功后，输出日志如下：</p>
<p><img src="https://img-blog.csdnimg.cn/20200330153759390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW95YW5nX28=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>记录日志最末尾位置root@localhost:后的字符串，此字符串为mysql管理员临时登录密码。</p>
<p>6、编辑配置文件my.cnf，添加配置如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vi /etc/my.cnf   如果 my.cnf 文件没有的话自行添加</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">basedir=/usr/<span class="built_in">local</span>/mysql/</span><br><span class="line">datadir=/usr/<span class="built_in">local</span>/mysql/data/</span><br><span class="line">port = 3306</span><br><span class="line">symbolic-links=0</span><br><span class="line">symbolic-links=0</span><br><span class="line">max_connections=400</span><br><span class="line">innodb_file_per_table=1</span><br><span class="line">lower_case_table_names=1</span><br><span class="line">explicit_defaults_for_timestamp=1</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ 按esc 输入 ：wq 保存退出即可</span><br></pre></td></tr></table></figure>
<p>配置如下图：<br><img src="https://img-blog.csdnimg.cn/20200330153940629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW95YW5nX28=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>7、设为开机启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mysql/support-files/</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cp mysql.server /etc/init.d/mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vi /etc/init.d/mysql 打开编辑之后会看到下面有俩个字段(basedir和datadir)没有key 我们添加好key</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ basedir=/usr/<span class="built_in">local</span>/mysql/</span><br><span class="line">$ datadir=/usr/<span class="built_in">local</span>/mysql/data/</span><br></pre></td></tr></table></figure>
<p>8、授权为可执行状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chmod +x /etc/init.d/mysql</span><br></pre></td></tr></table></figure>
<p>9、开机启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chkconfig --add mysql</span><br></pre></td></tr></table></figure>
<p>10、启动mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ service mysql start  </span><br></pre></td></tr></table></figure>

<p>显示如下结果，说明数据库安装成功</p>
<p><img src="https://img-blog.csdnimg.cn/20200330154854471.png" alt="在这里插入图片描述"><br>如果出现如下提示信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ Starting MySQL... ERROR! The server quit without updating PID file</span><br></pre></td></tr></table></figure>

<p>查看是否存在mysql和mysqld的服务，如果存在，则结束进程，再重新执行启动命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ 这里上面的错误孤岛了很久没效果的话 建议卸载了mysql重新安装一次</span><br></pre></td></tr></table></figure>

<p>11、查询mysql服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps -ef|grep mysql</span><br></pre></td></tr></table></figure>

<p>12、登录mysql，修改密码(密码为步骤5生成的临时密码)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./mysql -u root -p 如果提示mysql：未找到命令 请进入/usl/<span class="built_in">local</span>/mysql/bin/目录下执行</span><br></pre></td></tr></table></figure>

<p>Enter password:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql&gt;<span class="built_in">set</span> password <span class="keyword">for</span> root@localhost = password(<span class="string">&#x27;yourpass&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>13、开放远程连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql&gt;use mysql;</span><br><span class="line">$ msyql&gt;update user <span class="built_in">set</span> user.Host=<span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user.User=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">$ mysql&gt;flush privileges; 如果是云服务器的话，需要设置安全组，请自行百度</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>checkout无效</title>
    <url>/2018/10/29/checkout%E6%97%A0%E6%95%88/</url>
    <content><![CDATA[<p>在日常工作中，我们经常会遇到要更新一个项目，但是由于更改了配置，需要将这些配置<code>commit</code>或者<code>checkout</code>，但是有的同学不想commit怎么办呢，只能通过checkout，那么问题又来了，改了很多配置，checkout之后又要重新修改配置，就很烦。</p>
<p>哈哈哈，在偶然的机会，找前端大神学会了俩句命令，亲测在代码merge没冲突没问题的情况下都可以成功！</p>
<p>那么我们开始吧</p>
<p>1、首先 你需要update的项目 会告诉你更改了那些配置，必须要还原或者提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure>


<p>2、执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash</span><br></pre></td></tr></table></figure>
<p>命令的意思是将这些更改过的配置 暂存起来，注意是暂存！</p>
<p>3、然后<code>git pull </code>你会发现，神奇的以及开始update了，可以看到那些代码是更改过的</p>
<p>4、最后我们要把暂存的配置，给它取出来，用到以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git statsh pop</span><br></pre></td></tr></table></figure>



<p>5、最后你发现之前暂存的配置，以及取出来并且成功替换了update之后的配置</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>git branch出现end需要q才能退出</title>
    <url>/2021/04/01/git-branch%E5%87%BA%E7%8E%B0end%E9%9C%80%E8%A6%81q%E6%89%8D%E8%83%BD%E9%80%80%E5%87%BA/</url>
    <content><![CDATA[<p>git 进入了编辑模式</p>
<p>用以下命令即可解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global core.pager mor</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>.gitignore不生效的解决方案</title>
    <url>/2021/04/01/gitignore%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p><strong>原因：git本地运行有缓存，需要清楚git缓存即可</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rm -r --cached .</span><br></pre></td></tr></table></figure>

<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>清完缓存需要把代码推到远程仓库</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>.gitignore</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo d -g 部署失败</title>
    <url>/2021/08/17/hexo-d-g-%E9%83%A8%E7%BD%B2%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<p>hexo d -g 突然部署失败,报错如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ fatal: unable to access <span class="string">&#x27;https://github.com/xxxxx/xxxx.git/&#x27;</span>: The requested URL returned error: 403</span><br><span class="line">  err: Error: Spawn failed       </span><br><span class="line">  at ChildProcess.&lt;anonymous</span><br></pre></td></tr></table></figure>

<h2 id="1-更改hexo配置文件中的git镜像映射地址"><a href="#1-更改hexo配置文件中的git镜像映射地址" class="headerlink" title="1.更改hexo配置文件中的git镜像映射地址"></a>1.更改hexo配置文件中的git镜像映射地址</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim _config.yml   <span class="comment">#将https的地址更改为git开头的地址,如图</span></span><br></pre></td></tr></table></figure>
<img src="/2021/08/17/hexo-d-g-%E9%83%A8%E7%BD%B2%E5%A4%B1%E8%B4%A5/img4.png" class title="This is an test image">


<h2 id="2-检查发布机器和github之间的公私钥是否配对"><a href="#2-检查发布机器和github之间的公私钥是否配对" class="headerlink" title="2.检查发布机器和github之间的公私钥是否配对"></a>2.检查发布机器和github之间的公私钥是否配对</h2><h2 id="3-hexo清楚缓存"><a href="#3-hexo清楚缓存" class="headerlink" title="3.hexo清楚缓存"></a>3.hexo清楚缓存</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<h2 id="4-重新发布"><a href="#4-重新发布" class="headerlink" title="4.重新发布"></a>4.重新发布</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>

<h2 id="5-发布成功"><a href="#5-发布成功" class="headerlink" title="5.发布成功"></a>5.发布成功</h2>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+netlify+git+个人域名搭建博客</title>
    <url>/2021/07/12/hexo-netlify-git-%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><strong>部署过程需要用到一些<code>Linux</code>命令,且本文部署操作机为Mac,如是Windows不保证能100%成功噢</strong></p>
<h2 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h2><pre><code>操作机: Mac(iterm)
Git: 创建好个人项目(Public) #注意这里项目命名 XX.github.io.git
Netlify: 注册好自己的项目和团队
Hexo: 5.4.0
Node: 15.12.0(注意Node版本)
</code></pre>
<p><strong>PS:以上软件自行安装</strong></p>
<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h2 id="初始化博客文件夹"><a href="#初始化博客文件夹" class="headerlink" title="初始化博客文件夹"></a>初始化博客文件夹</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init blog(blog可根据自己情况更改)</span><br></pre></td></tr></table></figure>

<h2 id="安装node-moudles"><a href="#安装node-moudles" class="headerlink" title="安装node_moudles"></a>安装node_moudles</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line"></span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<h2 id="blog目录详解"><a href="#blog目录详解" class="headerlink" title="blog目录详解"></a>blog目录详解</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node_modules: node依赖包</span><br><span class="line">public：存放生成的页面</span><br><span class="line">scaffolds：生成文章的一些模板</span><br><span class="line"><span class="built_in">source</span>：存放文章</span><br><span class="line">themes：主题</span><br><span class="line">_config.yml: 博客的配置文件</span><br></pre></td></tr></table></figure>
<h2 id="本地启动Hexo"><a href="#本地启动Hexo" class="headerlink" title="本地启动Hexo"></a>本地启动Hexo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s(默认为4000端口)</span><br></pre></td></tr></table></figure>

<h2 id="hexo新建文章发布步骤"><a href="#hexo新建文章发布步骤" class="headerlink" title="hexo新建文章发布步骤"></a>hexo新建文章发布步骤</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean  <span class="comment">#清理静态文件和缓存数据</span></span><br><span class="line"></span><br><span class="line">hexo new <span class="string">&quot;新文章&quot;</span></span><br><span class="line"></span><br><span class="line">hexo g      <span class="comment">#生成静态数据(按日期归类的文件夹/html等)</span></span><br><span class="line"></span><br><span class="line">hexo s      <span class="comment">#本地启动hexo</span></span><br></pre></td></tr></table></figure>

<h1 id="关联Git"><a href="#关联Git" class="headerlink" title="关联Git"></a>关联Git</h1><h2 id="安装git部署插件"><a href="#安装git部署插件" class="headerlink" title="安装git部署插件"></a>安装git部署插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h2 id="修改hexo配置文件-关联git地址"><a href="#修改hexo配置文件-关联git地址" class="headerlink" title="修改hexo配置文件,关联git地址"></a>修改hexo配置文件,关联git地址</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim _config.yml</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/chaoyangya/chaoyangya.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h2 id="第一次提交代码"><a href="#第一次提交代码" class="headerlink" title="第一次提交代码"></a>第一次提交代码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init    <span class="comment">#初始化项目文件夹</span></span><br><span class="line"></span><br><span class="line">$ git add .  <span class="comment">#将所有文件添加到暂存区</span></span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">&quot;first commit&quot;</span>   <span class="comment">#提交到本地仓库，双引号内是提交的备注信息</span></span><br><span class="line"></span><br><span class="line">$ git remote add origin https://github.com/chaoyangya/chaoyangya.github.io.git</span><br><span class="line"></span><br><span class="line">$ git pull    <span class="comment">#拉取远程主分支信息，首次拉取合并信息</span></span><br><span class="line"></span><br><span class="line">$ git push -u -f origin master  <span class="comment">#提交到远程仓库，这个命令中的 -f 是强制推送，因为远程仓库只有初始化的文件，所以强制推送上去就行了，不加-f 会报当前分支没有远程分支，强制推送可以覆盖master，这样就完成了第一次提交的步骤)</span></span><br></pre></td></tr></table></figure>

<h2 id="将hexo内容部署到生产环境"><a href="#将hexo内容部署到生产环境" class="headerlink" title="将hexo内容部署到生产环境"></a>将hexo内容部署到生产环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d -g </span><br></pre></td></tr></table></figure>

<h1 id="关联Netlify"><a href="#关联Netlify" class="headerlink" title="关联Netlify"></a>关联Netlify</h1><p>登录Netlify建议使用github账号登录,会方便很多<br><img src="/2021/07/12/hexo-netlify-git-%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/images/img.png" alt="img.png"></p>
<h2 id="关联git仓库和分支"><a href="#关联git仓库和分支" class="headerlink" title="关联git仓库和分支"></a>关联git仓库和分支</h2><p>登录之后点击醒目的绿色的<code>New site fomr Git</code>按钮来新建站点并选取刚刚创建的仓库：</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>点击完<code>Deploy site</code>之后，Netlify 会自动构建并发布你的网站内容，最重要的是Netlify支持分支部署和部署预览，这样可以提高开发效率，降低发布风险和成本。当我还没有打完这行字，Netlify已经完成网站的发布了，它会提供一个由随机字符串组成且以 .netlify.com 为后缀结尾的网站供你访问.</p>
<h2 id="关联个人域名-如果不是从Netlify购入域名-需要将域名DNS指向Netlify"><a href="#关联个人域名-如果不是从Netlify购入域名-需要将域名DNS指向Netlify" class="headerlink" title="关联个人域名(如果不是从Netlify购入域名,需要将域名DNS指向Netlify)"></a>关联个人域名(如果不是从Netlify购入域名,需要将域名DNS指向Netlify)</h2><p>选择<code>Add domain alias</code>添加个人域名,这里Netlify会默认给你新添加的域名多加一个重定向的www网址<br><img src="/2021/07/12/hexo-netlify-git-%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/images/img1.png" alt="img1.png"></p>
<h2 id="开启Https"><a href="#开启Https" class="headerlink" title="开启Https"></a>开启Https</h2><p>Netlify免费提供SSL证书,支持添加自己的SSL,需要新增三个证书.或者将自己域名的<code>CNAME</code>记录类型指向你的.com结尾的域名也可以<br><img src="/2021/07/12/hexo-netlify-git-%E4%B8%AA%E4%BA%BA%E5%9F%9F%E5%90%8D%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/images/img2.png" alt="img2.png"></p>
<p>添加好之后等一会就可以通过你的域名来访问了</p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>推荐使用各个代码编辑器(大多数支持Markdown),方便快捷</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Hexo</tag>
        <tag>Netlify</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo优化加载速度</title>
    <url>/2021/07/14/hexo%E4%BC%98%E5%8C%96%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6/</url>
    <content><![CDATA[<h1 id="注意该方法利用插件更改配置-如主题中有Google字体导致加载缓慢-请移步其他内容"><a href="#注意该方法利用插件更改配置-如主题中有Google字体导致加载缓慢-请移步其他内容" class="headerlink" title="注意该方法利用插件更改配置,如主题中有Google字体导致加载缓慢,请移步其他内容"></a>注意该方法利用插件更改配置,如主题中有Google字体导致加载缓慢,请移步其他内容</h1><p>利用插件 <code>hexo-all-minifier</code></p>
<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-all-minifier --save</span><br></pre></td></tr></table></figure>

<p><strong>如果安装失败,请使用<code>cnpm</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cnpm install hexo-all-minifier --save</span><br></pre></td></tr></table></figure>

<h1 id="更改Hexo配置"><a href="#更改Hexo配置" class="headerlink" title="更改Hexo配置"></a>更改Hexo配置</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim  _config.yml</span><br></pre></td></tr></table></figure>
<p>加入如下配置:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启用all_minifier</span></span><br><span class="line">all_minifier: <span class="literal">true</span></span><br><span class="line"><span class="comment"># html压缩</span></span><br><span class="line">html_minifier:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  ignore_error: <span class="literal">false</span></span><br><span class="line">  exclude:</span><br><span class="line"></span><br><span class="line"><span class="comment"># css压缩</span></span><br><span class="line">css_minifier:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  exclude:</span><br><span class="line">    - <span class="string">&#x27;*.min.css&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># js压缩</span></span><br><span class="line">js_minifier:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  mangle: <span class="literal">true</span></span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - <span class="string">&#x27;*.min.js&#x27;</span></span><br><span class="line">js_concator:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  bundle_path: <span class="string">&#x27;/js/bundle.js&#x27;</span></span><br><span class="line">  front: <span class="literal">false</span></span><br><span class="line">  silent: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片优化</span></span><br><span class="line">image_minifier:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  interlaced: <span class="literal">false</span></span><br><span class="line">  multipass: <span class="literal">false</span></span><br><span class="line">  optimizationLevel: 2</span><br><span class="line">  pngquant: <span class="literal">false</span></span><br><span class="line">  progressive: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h1 id="重新发布"><a href="#重新发布" class="headerlink" title="重新发布"></a>重新发布</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo修改新建文章的默认字段</title>
    <url>/2021/07/09/hexo%E4%BF%AE%E6%94%B9%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E7%9A%84%E9%BB%98%E8%AE%A4%E5%AD%97%E6%AE%B5/</url>
    <content><![CDATA[<p><strong>因为每次新建文章都需要自己新增字段,所以就找到了修改新建文章的默认字段所在地,果然社会的进步跟人的偷懒也不是毫无关系(啊哈哈哈)</strong></p>
<p>默认使用命令新建只有</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title date tags</span><br></pre></td></tr></table></figure>

<p>我是把 <code>category</code> 也加上了 </p>
<p>修改项目根目录下<code>scaffolds</code>中的<code>post</code>模板即可,如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags: </span><br><span class="line">category: </span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>然后在新建文章的时候就有了<code>category</code>字段</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo删除文章</title>
    <url>/2021/07/08/hexo%E5%88%A0%E9%99%A4%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p><strong>hexo删除文章</strong></p>
<p>直接删除 “_posts” 中的 .md 结尾的文件</p>
<p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo管理多个标签</title>
    <url>/2021/07/08/hexo%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AA%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h2 id="1-hexo多个标签应该遵循-list-格式-如下"><a href="#1-hexo多个标签应该遵循-list-格式-如下" class="headerlink" title="1 hexo多个标签应该遵循 list 格式,如下"></a>1 hexo多个标签应该遵循 <strong>list</strong> 格式,如下</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: XXX</span><br><span class="line">date: 2021-04-07 17:39:32</span><br><span class="line">tags: [标签1,标签2]</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>libvulkan.so.1()(64bit)缺少依赖</title>
    <url>/2021/08/20/libvulkan-so-1-64bit-%E7%BC%BA%E5%B0%91%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[<p>前提:在Linux安装chrome的时候,报错缺少<code>libvulkan.so.1()(64bit)</code> 这个依赖</p>
<p>解决:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum -y install vulkan-1.1.97.0-1.el7.x86_64</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>mac 安装brew</title>
    <url>/2020/03/18/mac-%E5%AE%89%E8%A3%85brew/</url>
    <content><![CDATA[<h2 id="【已解决】mac-安装brew"><a href="#【已解决】mac-安装brew" class="headerlink" title="【已解决】mac 安装brew"></a>【已解决】mac 安装brew</h2><p>mac是自带ruby的 打开命令行工具terminal</p>
<p>1、查看ruby版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ruby -version</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200318153334646.png" alt="查看ruby版本"></p>
<p>2、然后使用ruby安装brew</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200318153528840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW95YW5nX28=,size_16,color_FFFFFF,t_70" alt="安装brew中"></p>
<p>3、brew 安装模块方法(举个例子：安装wget)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew install wget</span><br></pre></td></tr></table></figure>
<p>4、brew卸载模块方法(举个例子：卸载wget)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew uninstall wget</span><br></pre></td></tr></table></figure>

<p>5、其他brew命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew list</span><br></pre></td></tr></table></figure>

<p>brew跟pip有点类似，其他命令不一一列举了，大家自己help下就好啦</p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Brew</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql连接以及增删改查语句</title>
    <url>/2021/08/18/mysql%E8%BF%9E%E6%8E%A5%E4%BB%A5%E5%8F%8A%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<p>好久没操作数据库语句,都快忘光了,记录一下</p>
<h2 id="1-连接数据库-mysql"><a href="#1-连接数据库-mysql" class="headerlink" title="1.连接数据库(mysql)"></a>1.连接数据库(mysql)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql  -h机器ip -u用户名 -p密码 </span><br></pre></td></tr></table></figure>

<h2 id="2-查看所有数据库"><a href="#2-查看所有数据库" class="headerlink" title="2.查看所有数据库"></a>2.查看所有数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ show databases;</span><br></pre></td></tr></table></figure>

<h2 id="3-进入某个数据库"><a href="#3-进入某个数据库" class="headerlink" title="3.进入某个数据库"></a>3.进入某个数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ use xxx;   <span class="comment"># xxx为数据库名</span></span><br></pre></td></tr></table></figure>

<h2 id="4-查看数据库中的表"><a href="#4-查看数据库中的表" class="headerlink" title="4.查看数据库中的表"></a>4.查看数据库中的表</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ show tables;</span><br></pre></td></tr></table></figure>

<h2 id="4-查看数据库中的表-1"><a href="#4-查看数据库中的表-1" class="headerlink" title="4.查看数据库中的表"></a>4.查看数据库中的表</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ show tables;</span><br></pre></td></tr></table></figure>

<h2 id="5-增"><a href="#5-增" class="headerlink" title="5.增"></a>5.增</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ insert into 表名 ( field1, field2,...fieldN )</span><br><span class="line">                       VALUES</span><br><span class="line">                       ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure>

<h2 id="6-删"><a href="#6-删" class="headerlink" title="6.删"></a>6.删</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ delete from 表名 <span class="built_in">where</span> 字段名=字段值;</span><br></pre></td></tr></table></figure>

<h2 id="7-改"><a href="#7-改" class="headerlink" title="7.改"></a>7.改</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ update 表名 <span class="built_in">set</span> 字段名=字段值;</span><br></pre></td></tr></table></figure>

<h2 id="8-查"><a href="#8-查" class="headerlink" title="8.查"></a>8.查</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ select * from 表名 <span class="built_in">where</span> 字段名=字段值;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>newman生成好看的html报告</title>
    <url>/2021/08/18/newman%E7%94%9F%E6%88%90%E5%A5%BD%E7%9C%8B%E7%9A%84html%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<p>PS:运行newman需要<code>node</code> 版本大于10</p>
<h2 id="1-安装newman"><a href="#1-安装newman" class="headerlink" title="1.安装newman"></a>1.安装newman</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g newman</span><br></pre></td></tr></table></figure>

<h2 id="2-安装普通html报告插件-建议安装"><a href="#2-安装普通html报告插件-建议安装" class="headerlink" title="2.安装普通html报告插件(建议安装)"></a>2.安装普通html报告插件(建议安装)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g newman-reporter-html</span><br></pre></td></tr></table></figure>

<h2 id="3-安装美化html插件"><a href="#3-安装美化html插件" class="headerlink" title="3.安装美化html插件"></a>3.安装美化html插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g newman-reporter-htmlextra</span><br></pre></td></tr></table></figure>

<h2 id="4-newman命令详解"><a href="#4-newman命令详解" class="headerlink" title="4.newman命令详解"></a>4.newman命令详解</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ newman run  SX.postman_collection.json -e environment.json -r htmlextra,cli --reporter-htmlextra-title <span class="string">&quot;实训平台接口 测试报告&quot;</span> --reporter-htmlextra-browserTitle <span class="string">&quot;实训平台接口报告&quot;</span> --reporter-htmlextra-export Bapi.html</span><br><span class="line"><span class="comment">#参数解释:</span></span><br><span class="line">run 后面跟接口脚本json格式的文件</span><br><span class="line">-e 后面添加环境变量</span><br><span class="line">-r 指定生成的报告格式</span><br><span class="line">--reporter-htmlextra-title 指定生成的报告title</span><br><span class="line">--reporter-htmlextra-browserTitle 指定生成的浏览器title</span><br><span class="line">--reporter-htmlextra-export 指定生成的html文件名和路径</span><br></pre></td></tr></table></figure>

<img src="/2021/08/18/newman%E7%94%9F%E6%88%90%E5%A5%BD%E7%9C%8B%E7%9A%84html%E6%8A%A5%E5%91%8A/img6.png" class title="This is an test image">]]></content>
      <categories>
        <category>Newman</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>Newman</tag>
        <tag>Postman</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx解决多个端口映射80的配置</title>
    <url>/2021/04/16/nginx%E5%A4%9A%E4%B8%AA%E7%AB%AF%E5%8F%A3/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  xx.cn;  <span class="comment">#域名1</span></span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://x.x.x.x:9001;   <span class="comment">#域名1需要映射到80端口的服务端口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">     listen       80;</span><br><span class="line">     server_name   xx.cn;   <span class="comment">#域名2</span></span><br><span class="line"></span><br><span class="line">     location / &#123;</span><br><span class="line">         proxy_pass http://xx.xx.xx.xx:7300;    <span class="comment">#域名2需要映射到80端口的服务端口</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>


<h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p><strong>俩个server服务要相对独立，这样就可以同时将服务1和服务2的端口映射到80端口了</strong></p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx配置实现ip访问指定URL</title>
    <url>/2021/04/01/nginx%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0ip%E8%AE%BF%E9%97%AE%E6%8C%87%E5%AE%9AURL/</url>
    <content><![CDATA[<p><strong>我的需求是这样的，nginx+uwsgi启动的web服务，访问域名XX.CN之后，nginx报错404，我需要实现的是访问XX.CN，自动映射到XX.CN/login 因为我server是80端口，所以不需要加端口即可访问</strong></p>
<p>nginx配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim nginx.conf</span><br></pre></td></tr></table></figure>


<p>在你启动的server中加入如下配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="variable">$request_uri</span> = <span class="string">&quot;/&quot;</span> ) &#123;</span><br><span class="line">    rewrite <span class="string">&quot;/&quot;</span> http://XX.CN/login <span class="built_in">break</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>


<p>然后现在去访问XX.CN 就会映射到 XX.CN/login </p>
<p>大功告成！！！</p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>no such table:django_session</title>
    <url>/2021/04/01/no-such-table-django-session/</url>
    <content><![CDATA[<p><strong>出现上述问题是django没有django_session表</strong></p>
<p>错误跟Session的机制相关<br>既然要从Web服务器端来记录用户信息，<br>那么一定要有存放用户session id对应信息的地方才行</p>
<p>django创建存放session表命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python manage.py migrate</span><br></pre></td></tr></table></figure>

<p>出现很多绿色的ok即创建完成</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>node切换版本</title>
    <url>/2021/08/17/node%E5%88%87%E6%8D%A2%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="1-安装n"><a href="#1-安装n" class="headerlink" title="1.安装n"></a>1.安装n</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g n</span><br></pre></td></tr></table></figure>

<h2 id="2-使用-n-下载所需node"><a href="#2-使用-n-下载所需node" class="headerlink" title="2.使用 n 下载所需node"></a>2.使用 n 下载所需node</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ n 10.16.3  <span class="comment">#版本号 不需要加v</span></span><br></pre></td></tr></table></figure>

<h3 id="下载最新版本"><a href="#下载最新版本" class="headerlink" title="下载最新版本"></a>下载最新版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ n latest</span><br></pre></td></tr></table></figure>

<h3 id="删除某个版本"><a href="#删除某个版本" class="headerlink" title="删除某个版本"></a>删除某个版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ n rm 10.16.3  <span class="comment">#版本号 不需要加v</span></span><br></pre></td></tr></table></figure>

<h3 id="查看已安装版本"><a href="#查看已安装版本" class="headerlink" title="查看已安装版本"></a>查看已安装版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ n ls</span><br></pre></td></tr></table></figure>

<h2 id="3-新安装的node版本-需要使用ls切换"><a href="#3-新安装的node版本-需要使用ls切换" class="headerlink" title="3.新安装的node版本,需要使用ls切换"></a>3.新安装的node版本,需要使用ls切换</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ n ls 10.16.3 <span class="comment">#会出现所安装的所有node版本,使用版本在最上方</span></span><br></pre></td></tr></table></figure>

<h2 id="4-查看node版本"><a href="#4-查看node版本" class="headerlink" title="4.查看node版本"></a>4.查看node版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>npm切换版本</title>
    <url>/2021/07/14/npm%E5%88%87%E6%8D%A2%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="Npm切换版本"><a href="#Npm切换版本" class="headerlink" title="Npm切换版本"></a>Npm切换版本</h1><p>npm需要切换版本如果没有安装nvm很头疼,会存在以下三种情况:</p>
<pre><code>① Node环境还在,只是Npm被卸载
② Npm和Node版本不兼容
③ 存在多个Npm版本,无法切换
</code></pre>
<p><strong>PS:如果存在以上三种情况的,强烈建议,直接Nvm重新装Node,简单粗暴</strong></p>
<h2 id="卸载Node"><a href="#卸载Node" class="headerlink" title="卸载Node"></a>卸载Node</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm uninstall vx.x.x</span><br></pre></td></tr></table></figure>

<h2 id="安装指定Node版本"><a href="#安装指定Node版本" class="headerlink" title="安装指定Node版本"></a>安装指定Node版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm install vx.x.x</span><br></pre></td></tr></table></figure>

<h2 id="查看Node-Npm版本"><a href="#查看Node-Npm版本" class="headerlink" title="查看Node/Npm版本"></a>查看Node/Npm版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br><span class="line"></span><br><span class="line">$ npm -v</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Npm</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>Npm</tag>
      </tags>
  </entry>
  <entry>
    <title>npm缺少css-loader，/style-compiler，stylus-loader问题，npm没有权限无法全局更新问题</title>
    <url>/2018/10/17/npm%E7%BC%BA%E5%B0%91css-loader%EF%BC%8C-style-compiler%EF%BC%8Cstylus-loader%E9%97%AE%E9%A2%98%EF%BC%8Cnpm%E6%B2%A1%E6%9C%89%E6%9D%83%E9%99%90%E6%97%A0%E6%B3%95%E5%85%A8%E5%B1%80%E6%9B%B4%E6%96%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>​<br>ERROR in ./node_modules/css-loader!./node_modules/vue-loader/lib/style-compiler?{“vue”:true,”id”:”data-v-a5e4f82a”,”scoped”:false,”hasInlineConfig”:false}!./node_modules/stylus-loader?{“import”:[“<del>@didi/ada/style/mixins.styl”,”/home/xiaoju/manhattan-hera-webapp/client/style/base.styl”]}!./node_modules/vue-loader/lib/selector.js?type=styles&amp;index=0&amp;bustCache!./client/components/panel_links.vue<br>Cannot find module ‘postcss-import’<br>@ ./node_modules/style-loader!./node_modules/css-loader!./node_modules/vue-loader/lib/style-compiler?{“vue”:true,”id”:”data-v-a5e4f82a”,”scoped”:false,”hasInlineConfig”:false}!./node_modules/stylus-loader?{“import”:[“</del>@didi/ada/style/mixins.styl”,”/home/xiaoju/manhattan-hera-webapp/client/style/base.styl”]}!./node_modules/vue-loader/lib/selector.js?type=styles&amp;index=0&amp;bustCache!./client/components/panel_links.vue 4:14-454<br>@ ./client/components/panel_links.vue<br>@ ./client/app.ts<br>@ multi ./client/app.ts</p>
<p>如下图：</p>
<p>在测试项目的时候，部署前端在启动前端环境的时候遇到缺少组件css-loader，/style-compiler，stylus-loader，尝试了开启外网，npm的全局安装，单独安装组件( npn install stylus-loader css-loader style-loader style-compiler  –save-dev)后无果，最后在前端大神的指导下，发现是npm的目录没有权限，然后找到了破解npm无法全局安装下载的最新办法！亲测有效！</p>
<p>##方法一：</p>
<p>更改npm的默认安装目录</p>
<p>1、为全局安装创建一个安装目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir ~/.npm-global</span><br></pre></td></tr></table></figure>

<p>2、配置npm以使用新的目录路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm config <span class="built_in">set</span> prefix <span class="string">&#x27;~/.npm-global&#x27;</span></span><br></pre></td></tr></table></figure>

<p>3、打开或创建一个~/.profile文件并添加以下行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=~/.npm-global/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<p>4、然后全局安装npm即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p>5、然后你惊奇的会发现之前全局安装不下来的东西都可以下载下来了</p>
<p>在success出现的那一刻，会觉得整个虚拟机都美艳不可方物~</p>
<p>##方法二：使用节点版本管理器重新安装（高效适合高手）</p>
<p>1、由于npm和node.js产品由不同的实体管理，因此更新和维护可能变得复杂。此外，Node.js安装过程将npm安装在仅具有本地权限的目录中。当您尝试全局运行包时，这可能会导致权限错误。</p>
<p>为了解决这两个问题，许多开发人员选择使用节点版本管理器或nvm来安装npm。版本管理器将避免权限错误，并将解决更新Node.js和npm的复杂性。</p>
<p>此外，开发人员可以使用nvm在多个版本的npm上测试他们的应用程序。nvm使您可以轻松切换npm以及节点版本。这样可以更轻松地确保您的应用程序适用于大多数用户，即使他们使用的是其他版本的npm。如果您决定安装版本管理器，请使用您选择的版本管理器的说明来学习如何切换版本，并了解如何使用最新版本的npm保持最新。</p>
<p>nvm如何安装具体请参考</p>
<p><a href="https://github.com/creationix/nvm/blob/master/README.md#installation">https://github.com/creationix/nvm/blob/master/README.md#installation</a></p>
<p>2、安装完之后验证登陆系统将提示您输入用户名，密码和电子邮件。请务必使用与在网站上输入的用户名完全相同的方式拼写您的用户名，否则您将创建一个新帐户。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm login</span><br></pre></td></tr></table></figure>

<p>3、要测试您是否已成功登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm whoami</span><br></pre></td></tr></table></figure>

<p>4、然后尝试更新你的npm版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install npm@next -g</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Npm</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>Npm</tag>
      </tags>
  </entry>
  <entry>
    <title>nvm: Cannot uninstall currently-active node version, vx.x.x (inferred from x.x.x)</title>
    <url>/2021/07/14/nvm-Cannot-uninstall-currently-active-node-version-vx-x-x-inferred-from-x-x-x/</url>
    <content><![CDATA[<p>#使用nvm卸载node版本时报错如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm: Cannot uninstall currently-active node version, vx.x.x (inferred from</span><br><span class="line">  x.x.x)</span><br></pre></td></tr></table></figure>

<h2 id="需要先退出已经使用的node环境"><a href="#需要先退出已经使用的node环境" class="headerlink" title="需要先退出已经使用的node环境"></a>需要先退出已经使用的node环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm deactivate</span><br></pre></td></tr></table></figure>

<h2 id="然后再执行卸载命令"><a href="#然后再执行卸载命令" class="headerlink" title="然后再执行卸载命令"></a>然后再执行卸载命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm uninstall vx.x.x</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Npm</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>Npm</tag>
        <tag>Nvm</tag>
      </tags>
  </entry>
  <entry>
    <title>pip安装插件失败，拒绝连接</title>
    <url>/2021/03/30/pip%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6%E5%A4%B1%E8%B4%A5%EF%BC%8C%E6%8B%92%E7%BB%9D%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<p>WARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by ‘ConnectTimeoutError(&lt;pip._vendor.urllib3.connection.HTTPSConnection object at 0x7ff8fba5f080&gt;, ‘Connection to mirrors.aliyn.com timed out. (connect timeout=15)’)’: /pypi/simple/python-jenkins/</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip3 install python-jenkins</span><br></pre></td></tr></table></figure>
<p>安装python-jenkins报错如下<br><img src="https://img-blog.csdnimg.cn/20210330114856815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW95YW5nX28=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>解决办法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple python-jenkins</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20210330115051235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW95YW5nX28=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如上已经安装好了</p>
]]></content>
      <categories>
        <category>Pip</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pip</tag>
      </tags>
  </entry>
  <entry>
    <title>sed: -e expression #1, char 24: unknown option to &#39;s&#39; </title>
    <url>/2021/08/17/sed-e-expression-1-char-24-unknown-option-to-s/</url>
    <content><![CDATA[<p>在使用 <code>sed -e</code> 批量替换命令时候,报错如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="string">&quot;sed: -e expression #1, char 24: unknown option to `s` &quot;</span></span><br></pre></td></tr></table></figure>

<p>原因:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ 需要替换的内容中有符号,且该符号和你用来分割的符号一样,所以该条命令无法使用,详情如下图:</span><br></pre></td></tr></table></figure>
<img src="/2021/08/17/sed-e-expression-1-char-24-unknown-option-to-s/img5.png" class title="This is an test image">

<p>也就是说如果你需要替换的内容中存在 <code>|</code>  那么你的命令中用来分割的符号就需要使用 <code>@</code> 或者 <code>\</code> 否则就会报错</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Sed</tag>
      </tags>
  </entry>
  <entry>
    <title>selenium.common.exceptions.WebDriverException: Message: unknown error: cannot find Chrome binary</title>
    <url>/2021/08/20/selenium-common-exceptions-WebDriverException-Message-unknown-error-cannot-find-Chrome-binary/</url>
    <content><![CDATA[<p>报错: selenium.common.exceptions.WebDriverException: Message: unknown error: cannot find Chrome binary</p>
<p>原因是:<br>运行脚本的环境中没有找到chrome浏览器</p>
<p>解决:<br>windows/mac: 指定浏览器位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chrome_path = r<span class="string">&quot;/Library/Frameworks/Python.framework/Versions/3.6/bin/chromedriver&quot;</span>  <span class="comment">#mac地址 win自己更换路径即可</span></span><br><span class="line">  driver = webdriver.Chrome(chrome_path)</span><br></pre></td></tr></table></figure>

<p>linux: 安装chrome浏览器</p>
<p>  <a href="https://cywhat.cn/2021/08/20/centos7%E5%AE%89%E8%A3%85chrome%E6%B5%8F%E8%A7%88%E5%99%A8/">Linux安装chrome浏览器</a></p>
]]></content>
      <categories>
        <category>Selenium</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>supervisord管理常驻进程uwsgi/nginx/redis/mongodb</title>
    <url>/2021/05/24/supervisord%E7%AE%A1%E7%90%86%E5%B8%B8%E9%A9%BB%E8%BF%9B%E7%A8%8Buwsgi-nginx-redis-mongodb/</url>
    <content><![CDATA[<p>解决部署的一些项目,因机器关机/重启导致项目需要手动重新启动的问题</p>
<h2 id="1-安装supervisor"><a href="#1-安装supervisor" class="headerlink" title="1 `安装supervisor"></a>1 `安装supervisor</h2><p>yum安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install supervisor</span><br></pre></td></tr></table></figure>

<p>pip安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install supervisor</span><br></pre></td></tr></table></figure>

<p>easy_install安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ easy_install supervisor</span><br></pre></td></tr></table></figure>


<h2 id="2-配置supervisor"><a href="#2-配置supervisor" class="headerlink" title="2 `配置supervisor"></a>2 `配置supervisor</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成配置supervisor文件</span></span><br><span class="line">$ echo_supervisord_conf &gt; /etc/supervisord.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建存放配置文件目录</span></span><br><span class="line">$ mkdir -p /etc/supervisord.d/conf</span><br></pre></td></tr></table></figure>

<h2 id="3-修改默认配置"><a href="#3-修改默认配置" class="headerlink" title="3 `修改默认配置"></a>3 `修改默认配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#文件最后一行,目录修改为配置文件地址,我的.ini文件是在/etc/supervisord.d/conf/存放,而且本身配置文件也在etc中,所以目录直接写supervisord.d/conf/就可以了</span></span><br><span class="line">$ [include]</span><br><span class="line">$ files = supervisord.d/conf/*.ini</span><br></pre></td></tr></table></figure>


<h2 id="4-通过配置文件启动supervisor"><a href="#4-通过配置文件启动supervisor" class="headerlink" title="4 `通过配置文件启动supervisor"></a>4 `通过配置文件启动supervisor</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这里一定要用配置文件的绝对路径</span></span><br><span class="line">$ supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure>


<h2 id="5-编写要管理进程的配置文件"><a href="#5-编写要管理进程的配置文件" class="headerlink" title="5 `编写要管理进程的配置文件"></a>5 `编写要管理进程的配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#因为我这里配置文件中通配符是以.ini结尾 所以新建的文件后缀为.ini</span></span><br><span class="line">$ touch my_uwsgi.ini</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置如下</span></span><br><span class="line">$ [program:uwsgi]  <span class="comment">#uwsgi这个名称是管理进程的别名,可以自定义</span></span><br><span class="line">  user=root <span class="comment">#启动用户</span></span><br><span class="line">  <span class="built_in">command</span>=/root/pyenv/myenv/bin/uwsgi --ini  /root/pyenv/myenv/my_uwsgi.ini   <span class="comment">#启动的命令</span></span><br><span class="line">  directory=/root/pyenv/myenv    <span class="comment">#文件目录</span></span><br><span class="line">  autostart=<span class="literal">true</span>   <span class="comment">#是否跟随supervisor启动</span></span><br><span class="line">  autorestart=<span class="literal">true</span>   <span class="comment">#程序故障是否重启</span></span><br><span class="line">  stopasgroup=<span class="literal">true</span>   <span class="comment">#</span></span><br><span class="line">  startsecs=3   <span class="comment">#启动3s后无异常判断为正常</span></span><br><span class="line">  startretries=3   <span class="comment">#启动尝试次数</span></span><br><span class="line">  redirect_stderr=<span class="literal">true</span>   <span class="comment">#把stderr重定向到stdout,默认为flase</span></span><br><span class="line">  stdout_logfile=/var/<span class="built_in">log</span>/uwsgi_out.log   <span class="comment">#标准输出日志路径 这里一定要把uwsgi本身的日志输出关掉</span></span><br><span class="line">  stderr_logfile=/var/<span class="built_in">log</span>/uwsgi_err.log   <span class="comment">#输出错误日志路径</span></span><br></pre></td></tr></table></figure>


<h2 id="6-启动应用"><a href="#6-启动应用" class="headerlink" title="6 `启动应用"></a>6 `启动应用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#重启supervisor配置中的所有程序</span></span><br><span class="line">$ supervisorctl reload</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看supervisor状态 出现启动项目name即可</span></span><br><span class="line">$ supervisorctl status</span><br></pre></td></tr></table></figure>


<h2 id="7-supervisor命令详解"><a href="#7-supervisor命令详解" class="headerlink" title="7 `supervisor命令详解"></a>7 `supervisor命令详解</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ supervisorctl restart &lt;application name&gt;  <span class="comment">#重启指定应用</span></span><br><span class="line">$ supervisorctl stop &lt;application name&gt;  <span class="comment">#停止指定应用</span></span><br><span class="line">$ supervisorctl start &lt;application name&gt;  <span class="comment">#启动指定应用</span></span><br><span class="line">$ supervisorctl restart all  <span class="comment">#重启所有应用</span></span><br><span class="line">$ supervisorctl stop all  <span class="comment">#停止所有应用</span></span><br><span class="line">$ supervisorctl start all  <span class="comment">#启动所有应用</span></span><br><span class="line">$ supervisorctl update  <span class="comment">#配置文件修改后可以使用该命令加载新的配置</span></span><br><span class="line">$ supervisorctl reload  <span class="comment">#重新启动配置中的所有程序</span></span><br></pre></td></tr></table></figure>


<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>使用supervisorctl status查看发现有进程被不断重启,报错如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XXX(项目名)      FATAL     Exited too quickly (process <span class="built_in">log</span> may have details)</span><br></pre></td></tr></table></figure>

<p>原因:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">supervisor只支持前台程序的托管到后台(启动前需要<span class="built_in">kill</span>掉已经存在的进程),例如:</span><br><span class="line"></span><br><span class="line">	<span class="comment">#uwsgi</span></span><br><span class="line">	uwsgi如果出现不断重启,一定是启动命令中加了-d的参数,去掉就好了</span><br><span class="line"></span><br><span class="line">	<span class="comment">#redis</span></span><br><span class="line">	redis就需要把redis.conf配置文件中的daemonize设置为no</span><br><span class="line"></span><br><span class="line">	<span class="comment">#nginx</span></span><br><span class="line">	nginx就需要在命令行后缀增加 -g ‘daemon off;’</span><br><span class="line"></span><br><span class="line">	<span class="comment">#mongodb</span></span><br><span class="line">	mongodb如果不断重启,多半也是因为启动命令中加了后台运行的参数 &amp; 同样的去掉就可以了</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Supervisord</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Supervisord</tag>
      </tags>
  </entry>
  <entry>
    <title>web服务 访问Linux中的静态文件</title>
    <url>/2021/03/29/web%E6%9C%8D%E5%8A%A1-%E8%AE%BF%E9%97%AELinux%E4%B8%AD%E7%9A%84%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>报错404，NOT FOUND可能是因为nginx.conf配置文件的俩处地方配置有误，按照下面，检查你的配置之后99.9999%是可以在浏览器访问Linux的静态文件的</p>
<p>1、检查nginx是否打开允许访问本地文件的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim nginx.conf</span><br></pre></td></tr></table></figure>


<p>2、查找如下图的配置项，没有的话添加即可，注意是在http这个服务中<br><img src="https://img-blog.csdnimg.cn/20210329180009631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW95YW5nX28=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ proxy_intercept_errors on;</span><br></pre></td></tr></table></figure>

<p>3、检查需要访问文件的路径是否配置正确，例如我要访问的静态文件名称为Bapi.html，文件存放路径为root/cccc/Bapi.html，配置如下</p>
<p><img src="https://img-blog.csdnimg.cn/20210329180232275.png" alt="在这里插入图片描述"></p>
<p>4、访问静态文件</p>
<p><img src="https://img-blog.csdnimg.cn/20210329180310114.png" alt="在这里插入图片描述"><br>可以访问，我是有域名的，所以我的访问直接就是域名+Bapi.html 其他格式的文件同理。</p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>怎么让你的个人博客可以在百度谷歌搜索到</title>
    <url>/2021/07/23/%E6%80%8E%E4%B9%88%E8%AE%A9%E4%BD%A0%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%8F%AF%E4%BB%A5%E5%9C%A8%E7%99%BE%E5%BA%A6%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2%E5%88%B0/</url>
    <content><![CDATA[<p>怎么让百度和谷歌收录你的博客(仅仅局限于拥有自己域名的个人博客使用)</p>
<p>收录的好处:<br><strong>被搜索引擎收录后，别人就可以通过搜索引擎搜索到你的文章</strong></p>
<h2 id="百度"><a href="#百度" class="headerlink" title="百度:"></a>百度:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ https://ziyuan.baidu.com/linksubmit/url</span><br></pre></td></tr></table></figure>

<h2 id="谷歌"><a href="#谷歌" class="headerlink" title="谷歌"></a>谷歌</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ https://search.google.com/search-console/welcome  <span class="comment">#需要登录Google账号</span></span><br></pre></td></tr></table></figure>

<h2 id="360搜索"><a href="#360搜索" class="headerlink" title="360搜索"></a>360搜索</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ https://info.so.360.cn/site_submit.html    <span class="comment">#需要提交备案信息</span></span><br></pre></td></tr></table></figure>

<h2 id="必应"><a href="#必应" class="headerlink" title="必应"></a>必应</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ https://www.bing.com/webmasters/about      <span class="comment">#验证方式xml meta dns</span></span><br></pre></td></tr></table></figure>

<h2 id="搜狗"><a href="#搜狗" class="headerlink" title="搜狗"></a>搜狗</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ https://zhanzhang.sogou.com/?forceredirect=1<span class="comment">#   #需要登录验证</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>解决hexo图片不展示问题</title>
    <url>/2021/08/18/%E8%A7%A3%E5%86%B3hexo%E5%9B%BE%E7%89%87%E4%B8%8D%E5%B1%95%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1-更改hexo配置文件"><a href="#1-更改hexo配置文件" class="headerlink" title="1.更改hexo配置文件"></a>1.更改hexo配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim _config.yml <span class="comment">#配置_config.yml里面的post_asset_folder:false 设置为 true 如图</span></span><br></pre></td></tr></table></figure>
<img src="/2021/08/18/%E8%A7%A3%E5%86%B3hexo%E5%9B%BE%E7%89%87%E4%B8%8D%E5%B1%95%E7%A4%BA%E9%97%AE%E9%A2%98/img7.png" class title="This is an test image">

<h2 id="2-安装npm插件"><a href="#2-安装npm插件" class="headerlink" title="2.安装npm插件"></a>2.安装npm插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install https://github.com/CodeFalling/hexo-asset-image --save  </span><br></pre></td></tr></table></figure>

<h2 id="3-清除hexo缓存"><a href="#3-清除hexo缓存" class="headerlink" title="3.清除hexo缓存"></a>3.清除hexo缓存</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<h2 id="4-创建新的文章"><a href="#4-创建新的文章" class="headerlink" title="4.创建新的文章"></a>4.创建新的文章</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;XXA&quot;</span>   <span class="comment">#创建完文章后,会发现 _post 目录下多出一个XXA的文件夹,把图片放入该文件夹中</span></span><br></pre></td></tr></table></figure>

<h2 id="5-然后文章中引入图片"><a href="#5-然后文章中引入图片" class="headerlink" title="5.然后文章中引入图片"></a>5.然后文章中引入图片</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ &#123;% asset_img img7.png This is an image %&#125;   <span class="comment">#img7.png为你的图片名称,不可重复 This is an image是图片介绍</span></span><br></pre></td></tr></table></figure>

<p><strong>ps:唯一的缺点就是 预览的时候看不见图片 需要重新发布</strong></p>
<h2 id="6-重新发布"><a href="#6-重新发布" class="headerlink" title="6.重新发布"></a>6.重新发布</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>

<p>#如果以上操作未生效，图片还不显示，进行以下操作：</p>
<h3 id="1-打开-node-modules-hexo-asset-image-index-js"><a href="#1-打开-node-modules-hexo-asset-image-index-js" class="headerlink" title="1.打开/node_modules/hexo-asset-image/index.js"></a>1.打开/node_modules/hexo-asset-image/index.js</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /node_modules/hexo-asset-image/index.js</span><br></pre></td></tr></table></figure>

<h3 id="2-替换以下内容-建议备份原index-js文件"><a href="#2-替换以下内容-建议备份原index-js文件" class="headerlink" title="2.替换以下内容(建议备份原index.js文件)"></a>2.替换以下内容(建议备份原index.js文件)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">var cheerio = require(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line"><span class="keyword">function</span> getPosition(str, m, i) &#123;</span><br><span class="line">  <span class="built_in">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version = String(hexo.version).split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(data)&#123;</span><br><span class="line">  var config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">    	var link = data.permalink;</span><br><span class="line">	<span class="keyword">if</span>(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class="line">	   var beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, 1) + 1;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	   var beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, 3) + 1;</span><br><span class="line">	// In hexo 3.1.1, the permalink of <span class="string">&quot;about&quot;</span> page is like <span class="string">&quot;.../about/index.html&quot;</span>.</span><br><span class="line">	var endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + 1;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">		<span class="keyword">if</span> ($(this).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">			// For windows style path, we replace <span class="string">&#x27;\&#x27;</span> to <span class="string">&#x27;/&#x27;</span>.</span><br><span class="line">			var src = $(this).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">			<span class="keyword">if</span>(!/http[s]*.*|\/\/.*/.<span class="built_in">test</span>(src) &amp;&amp;</span><br><span class="line">			   !/^\s*\//.<span class="built_in">test</span>(src)) &#123;</span><br><span class="line">			  // For <span class="string">&quot;about&quot;</span> page, the first part of <span class="string">&quot;src&quot;</span> can<span class="string">&#x27;t be removed.</span></span><br><span class="line"><span class="string">			  // In addition, to support multi-level local directory.</span></span><br><span class="line"><span class="string">			  var linkArray = link.split(&#x27;</span>/<span class="string">&#x27;).filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">				return elem != &#x27;</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">			  &#125;);</span></span><br><span class="line"><span class="string">			  var srcArray = src.split(&#x27;</span>/<span class="string">&#x27;).filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">				return elem != &#x27;</span><span class="string">&#x27; &amp;&amp; elem != &#x27;</span>.<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">			  &#125;);</span></span><br><span class="line"><span class="string">			  if(srcArray.length &gt; 1)</span></span><br><span class="line"><span class="string">				srcArray.shift();</span></span><br><span class="line"><span class="string">			  src = srcArray.join(&#x27;</span>/<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">			  $(this).attr(&#x27;</span>src<span class="string">&#x27;, config.root + link + src);</span></span><br><span class="line"><span class="string">			  console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span></span><br><span class="line"><span class="string">			&#125;</span></span><br><span class="line"><span class="string">		&#125;else&#123;</span></span><br><span class="line"><span class="string">			console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span></span><br><span class="line"><span class="string">			console.info&amp;&amp;console.info($(this));</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">      data[key] = $.html();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure>

<h3 id="3-然后清空缓存，再次发布"><a href="#3-然后清空缓存，再次发布" class="headerlink" title="3.然后清空缓存，再次发布"></a>3.然后清空缓存，再次发布</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line"></span><br><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
